{
  "comments": [
    {
      "key": {
        "uuid": "520cd501_c176eec7",
        "filename": "python/ofagent/connection_mgr.py",
        "patchSetId": 2
      },
      "lineNbr": 40,
      "author": {
        "id": 1000097
      },
      "writtenOn": "2019-09-30T10:24:49Z",
      "side": 1,
      "message": "Do we really need the is_alive flag? Once we set it to True, we never set it to False, so do we need it?",
      "revId": "72bd4c2ec07edc43f4729af7de0e954647c1637f",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3c391e1a_647fb493",
        "filename": "python/ofagent/connection_mgr.py",
        "patchSetId": 2
      },
      "lineNbr": 98,
      "author": {
        "id": 1000097
      },
      "writtenOn": "2019-09-30T10:24:49Z",
      "side": 1,
      "message": "Trying to understand the concept and the behaviour we are trying to create. My understanding is that if the liveness/readiness probes fail then K8s will restart the service. \n\nNow if the grpc connection between the ofagent and the vcore is lost, do we want k8s to restart ofagent? Will that help?",
      "revId": "72bd4c2ec07edc43f4729af7de0e954647c1637f",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bac55e51_f3791d81",
        "filename": "python/ofagent/connection_mgr.py",
        "patchSetId": 2
      },
      "lineNbr": 98,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2019-09-30T16:53:22Z",
      "side": 1,
      "message": "readiness determines it k8s will send a request to a container/pod. i.e. if readiness is false then k8s will not load balance to the pod.\n\nliveness is the one k8s uses to determine a restart. \n\nso when a connection goes down, readiness may go false, but liveness may stay as true (if the component can get back to ready when the connection recovers)",
      "parentUuid": "3c391e1a_647fb493",
      "revId": "72bd4c2ec07edc43f4729af7de0e954647c1637f",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4188cb9c_0474f7f7",
        "filename": "python/ofagent/connection_mgr.py",
        "patchSetId": 2
      },
      "lineNbr": 98,
      "author": {
        "id": 1000619
      },
      "writtenOn": "2019-10-01T04:22:25Z",
      "side": 1,
      "message": "Thank you Amit and David for the comments. Currently both Liveness and Readiness probes implement the same probing logic of 4 check conditions. Can we split the 4 check conditions into two sets. \nConnectionManager.channel and ConnectionManager.is_alive for Liveness Probe (If it fails the pod will be restarted)\nConnectionManager.subscription and ConnectionManager.grpc_client for Readiness Probe (If it fails the pod will be isolated from traffic)",
      "parentUuid": "3c391e1a_647fb493",
      "revId": "72bd4c2ec07edc43f4729af7de0e954647c1637f",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    }
  ]
}