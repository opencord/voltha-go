{
  "comments": [
    {
      "key": {
        "uuid": "64de8288_48aa5395",
        "filename": "rw_core/utils/core_utils.go",
        "patchSetId": 2
      },
      "lineNbr": 73,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2020-03-31T17:30:08Z",
      "side": 1,
      "message": "Under load condition, a number of requests may be waiting for the lock to be released.   Once it is released, the order of requests may no longer be respected.  That\u0027s one of the main reason I move away from using locks.",
      "revId": "395d90b2de68c6b5e740188acfdeeee3f14b75ba",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4f4fbfd3_1eb3dfac",
        "filename": "rw_core/utils/core_utils.go",
        "patchSetId": 2
      },
      "lineNbr": 73,
      "author": {
        "id": 1000107
      },
      "writtenOn": "2020-03-31T17:36:57Z",
      "side": 1,
      "message": "This lock is only held for a moment, while this thread\u0027s request is added to the queue.  (And again later when it is removed from the queue.)\n\nSince the queue actually implements the request ordering, and this lock is only held for a moment, it doesn\u0027t need to guarantee order.",
      "parentUuid": "64de8288_48aa5395",
      "revId": "395d90b2de68c6b5e740188acfdeeee3f14b75ba",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d2e7bd44_0b03e5d4",
        "filename": "rw_core/utils/core_utils.go",
        "patchSetId": 2
      },
      "lineNbr": 73,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2020-03-31T17:48:16Z",
      "side": 1,
      "message": "Even if it\u0027s held a brief moment there is still a chance of two requests being processed out of order.    Ordering is extremely important as out of order events may result in incorrect state transition.   We saw it multiple times before and these are very hard to track down.  If there is a way to keep the requests in order before adding them into the queue then I would strongly recommend doing so.",
      "parentUuid": "4f4fbfd3_1eb3dfac",
      "revId": "395d90b2de68c6b5e740188acfdeeee3f14b75ba",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "82e74dc9_63e0ddc1",
        "filename": "rw_core/utils/core_utils.go",
        "patchSetId": 2
      },
      "lineNbr": 73,
      "author": {
        "id": 1000107
      },
      "writtenOn": "2020-03-31T18:00:18Z",
      "side": 1,
      "message": "Whether requests are serialized by a channel or a mutex, neither can guarantee the order in which request arrive.\n\nIf such ordering needs to be guaranteed, there are more fundamental issues with the design that need to be addressed.\n\nEven if such is the case, it\u0027s no reason not to merge this change.  This version makes the same ordering guarantees as the previous implementation - that once requests have arrived, their ordering will remain the same.",
      "parentUuid": "d2e7bd44_0b03e5d4",
      "revId": "395d90b2de68c6b5e740188acfdeeee3f14b75ba",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "28813567_1109e6ed",
        "filename": "rw_core/utils/core_utils.go",
        "patchSetId": 2
      },
      "lineNbr": 73,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2020-03-31T18:06:00Z",
      "side": 1,
      "message": "I disagree.   This implementation does not guarantee the same ordering as before.  Here there is a lock, in the previous one it was a buffered channel.\n\nIf there are 20 requests coming at the same time, then with a lock these may be put in a queue not in FIFO order.  With a buffered channel, it will.",
      "parentUuid": "82e74dc9_63e0ddc1",
      "revId": "395d90b2de68c6b5e740188acfdeeee3f14b75ba",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    }
  ]
}