{
  "comments": [
    {
      "key": {
        "uuid": "17a35d17_569072ab",
        "filename": "rw_core/core/adapter_proxy.go",
        "patchSetId": 1
      },
      "lineNbr": 59,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2020-03-10T21:20:54Z",
      "side": 1,
      "message": "is a message always guaranteed to be sent on this channel, i.e. will there be a time out if there is none set on the ctx?",
      "range": {
        "startLine": 59,
        "startChar": 24,
        "endLine": 59,
        "endChar": 32
      },
      "revId": "929f91854c624289367bb5c98224e01e77e4365c",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2722a432_b1a9108a",
        "filename": "rw_core/core/adapter_proxy.go",
        "patchSetId": 1
      },
      "lineNbr": 59,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2020-03-11T18:11:53Z",
      "side": 1,
      "message": "Yes, a message will either be sent or an error will be produced, which could be a timeout.   At this stage all we are interested is if this message was successfully sent over sent.",
      "parentUuid": "17a35d17_569072ab",
      "range": {
        "startLine": 59,
        "startChar": 24,
        "endLine": 59,
        "endChar": 32
      },
      "revId": "929f91854c624289367bb5c98224e01e77e4365c",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "540e1931_40db2860",
        "filename": "rw_core/core/adapter_proxy.go",
        "patchSetId": 1
      },
      "lineNbr": 61,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2020-03-10T21:20:54Z",
      "side": 1,
      "message": "device-id",
      "range": {
        "startLine": 61,
        "startChar": 68,
        "endLine": 61,
        "endChar": 76
      },
      "revId": "929f91854c624289367bb5c98224e01e77e4365c",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1c9564fd_796aea74",
        "filename": "rw_core/core/adapter_proxy.go",
        "patchSetId": 1
      },
      "lineNbr": 245,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2020-03-10T21:20:54Z",
      "side": 1,
      "message": "len is very dev focused. flow-count? group-count?",
      "range": {
        "startLine": 245,
        "startChar": 67,
        "endLine": 245,
        "endChar": 76
      },
      "revId": "929f91854c624289367bb5c98224e01e77e4365c",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "63bfbbf8_7b3e638f",
        "filename": "rw_core/core/adapter_proxy.go",
        "patchSetId": 1
      },
      "lineNbr": 245,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2020-03-11T18:11:53Z",
      "side": 1,
      "message": "Sure, will change.",
      "parentUuid": "1c9564fd_796aea74",
      "range": {
        "startLine": 245,
        "startChar": 67,
        "endLine": 245,
        "endChar": 76
      },
      "revId": "929f91854c624289367bb5c98224e01e77e4365c",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0a14693a_0dc86ed2",
        "filename": "rw_core/core/adapter_proxy_test.go",
        "patchSetId": 1
      },
      "lineNbr": 116,
      "author": {
        "id": 1000107
      },
      "writtenOn": "2020-03-11T16:59:43Z",
      "side": 1,
      "message": "Consider ctx.Err() to get an error based on cancellation reason.",
      "revId": "929f91854c624289367bb5c98224e01e77e4365c",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7e17dcef_c504aef3",
        "filename": "rw_core/core/adapter_proxy_test.go",
        "patchSetId": 1
      },
      "lineNbr": 116,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2020-03-11T18:11:53Z",
      "side": 1,
      "message": "Will change.",
      "parentUuid": "0a14693a_0dc86ed2",
      "revId": "929f91854c624289367bb5c98224e01e77e4365c",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "36b67c1b_783c980e",
        "filename": "rw_core/core/adapter_proxy_test.go",
        "patchSetId": 1
      },
      "lineNbr": 211,
      "author": {
        "id": 1000107
      },
      "writtenOn": "2020-03-11T16:59:43Z",
      "side": 1,
      "message": "Best to `defer` cancel, so it is still called if the function returns early for any reason.\n\n(more like this)",
      "revId": "929f91854c624289367bb5c98224e01e77e4365c",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "309b501a_7bf5e4f7",
        "filename": "rw_core/core/adapter_proxy_test.go",
        "patchSetId": 1
      },
      "lineNbr": 211,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2020-03-11T18:11:53Z",
      "side": 1,
      "message": "Sure will do",
      "parentUuid": "36b67c1b_783c980e",
      "revId": "929f91854c624289367bb5c98224e01e77e4365c",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e7ac9601_70eed5d7",
        "filename": "rw_core/core/adapter_request_handler.go",
        "patchSetId": 1
      },
      "lineNbr": 131,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2020-03-10T21:20:54Z",
      "side": 1,
      "message": "adapter",
      "range": {
        "startLine": 131,
        "startChar": 36,
        "endLine": 131,
        "endChar": 43
      },
      "revId": "929f91854c624289367bb5c98224e01e77e4365c",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6011b80d_fc55d6c2",
        "filename": "rw_core/core/adapter_request_handler.go",
        "patchSetId": 1
      },
      "lineNbr": 131,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2020-03-10T21:20:54Z",
      "side": 1,
      "message": "device-types",
      "range": {
        "startLine": 131,
        "startChar": 57,
        "endLine": 131,
        "endChar": 68
      },
      "revId": "929f91854c624289367bb5c98224e01e77e4365c",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa10bf51_a043d32e",
        "filename": "rw_core/core/adapter_request_handler.go",
        "patchSetId": 1
      },
      "lineNbr": 188,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2020-03-10T21:20:54Z",
      "side": 1,
      "message": "device-id",
      "range": {
        "startLine": 188,
        "startChar": 45,
        "endLine": 188,
        "endChar": 53
      },
      "revId": "929f91854c624289367bb5c98224e01e77e4365c",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5dbc4b03_f6b511ec",
        "filename": "rw_core/core/adapter_request_handler.go",
        "patchSetId": 1
      },
      "lineNbr": 189,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2020-03-10T21:20:54Z",
      "side": 1,
      "message": "do we need the warning here. could this just return `rhp.deviceMgr.GetDevice(context.TODO(), pID.Id)`",
      "range": {
        "startLine": 187,
        "startChar": 2,
        "endLine": 189,
        "endChar": 2
      },
      "revId": "929f91854c624289367bb5c98224e01e77e4365c",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "54891d0b_54c8f1fe",
        "filename": "rw_core/core/adapter_request_handler.go",
        "patchSetId": 1
      },
      "lineNbr": 189,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2020-03-11T18:11:53Z",
      "side": 1,
      "message": "For troubling shooting it\u0027s beneficial since the response is going straight over kafka to the adapter and without it we may not know whether we have sent a failure response.",
      "parentUuid": "5dbc4b03_f6b511ec",
      "range": {
        "startLine": 187,
        "startChar": 2,
        "endLine": 189,
        "endChar": 2
      },
      "revId": "929f91854c624289367bb5c98224e01e77e4365c",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "101856e3_dfc69d1c",
        "filename": "rw_core/core/adapter_request_handler.go",
        "patchSetId": 1
      },
      "lineNbr": 189,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2020-03-16T15:48:47Z",
      "side": 1,
      "message": "Debug then?",
      "parentUuid": "54891d0b_54c8f1fe",
      "range": {
        "startLine": 187,
        "startChar": 2,
        "endLine": 189,
        "endChar": 2
      },
      "revId": "929f91854c624289367bb5c98224e01e77e4365c",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b485fa65_c2514028",
        "filename": "rw_core/core/adapter_request_handler.go",
        "patchSetId": 1
      },
      "lineNbr": 235,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2020-03-10T21:20:54Z",
      "side": 1,
      "message": "\u0026empty.Empty{}",
      "range": {
        "startLine": 235,
        "startChar": 8,
        "endLine": 235,
        "endChar": 24
      },
      "revId": "929f91854c624289367bb5c98224e01e77e4365c",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "30b8f9ec_b5075a4f",
        "filename": "rw_core/core/adapter_request_handler.go",
        "patchSetId": 1
      },
      "lineNbr": 492,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2020-03-10T21:20:54Z",
      "side": 1,
      "message": "just return childDeviceDetected as opposed to print warning? let caller decide what to do in case of an error?",
      "range": {
        "startLine": 492,
        "startChar": 30,
        "endLine": 492,
        "endChar": 49
      },
      "revId": "929f91854c624289367bb5c98224e01e77e4365c",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3ee102a1_e61fd18a",
        "filename": "rw_core/core/adapter_request_handler.go",
        "patchSetId": 1
      },
      "lineNbr": 492,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2020-03-11T18:11:53Z",
      "side": 1,
      "message": "See above,  Caller is an adapter in a different container.  It\u0027s helpful for debugging.",
      "parentUuid": "30b8f9ec_b5075a4f",
      "range": {
        "startLine": 492,
        "startChar": 30,
        "endLine": 492,
        "endChar": 49
      },
      "revId": "929f91854c624289367bb5c98224e01e77e4365c",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9d4c8157_0277a34c",
        "filename": "rw_core/core/adapter_request_handler.go",
        "patchSetId": 1
      },
      "lineNbr": 549,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2020-03-10T21:20:54Z",
      "side": 1,
      "message": "no need to warn if returning error? similar comments down the page.",
      "range": {
        "startLine": 549,
        "startChar": 0,
        "endLine": 549,
        "endChar": 71
      },
      "revId": "929f91854c624289367bb5c98224e01e77e4365c",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f65bd3ba_0488d571",
        "filename": "rw_core/core/adapter_request_handler.go",
        "patchSetId": 1
      },
      "lineNbr": 719,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2020-03-10T21:20:54Z",
      "side": 1,
      "message": "left over debug statement?",
      "range": {
        "startLine": 719,
        "startChar": 0,
        "endLine": 719,
        "endChar": 39
      },
      "revId": "929f91854c624289367bb5c98224e01e77e4365c",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "01dc40e2_60014ad5",
        "filename": "rw_core/core/adapter_request_handler.go",
        "patchSetId": 1
      },
      "lineNbr": 719,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2020-03-11T18:11:53Z",
      "side": 1,
      "message": "Will clean.",
      "parentUuid": "f65bd3ba_0488d571",
      "range": {
        "startLine": 719,
        "startChar": 0,
        "endLine": 719,
        "endChar": 39
      },
      "revId": "929f91854c624289367bb5c98224e01e77e4365c",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "37628ef2_5027a7c5",
        "filename": "rw_core/core/device_agent.go",
        "patchSetId": 1
      },
      "lineNbr": 58,
      "author": {
        "id": 1000107
      },
      "writtenOn": "2020-03-11T16:59:43Z",
      "side": 1,
      "message": "Would it be worth using a custom queue implementation that could grow on demand?  (Possibly a separate jira.)",
      "revId": "929f91854c624289367bb5c98224e01e77e4365c",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0b2f1f29_672674d8",
        "filename": "rw_core/core/device_agent.go",
        "patchSetId": 1
      },
      "lineNbr": 58,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2020-03-11T18:11:53Z",
      "side": 1,
      "message": "I don\u0027t know if that will just add complexity for limited benefits.   Something to think about.",
      "parentUuid": "37628ef2_5027a7c5",
      "revId": "929f91854c624289367bb5c98224e01e77e4365c",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "18ffd107_9ecf6259",
        "filename": "rw_core/core/device_agent.go",
        "patchSetId": 1
      },
      "lineNbr": 97,
      "author": {
        "id": 1000107
      },
      "writtenOn": "2020-03-11T16:59:43Z",
      "side": 1,
      "message": "It may be cleaner in this case to short-circuit the function if already started.\n\nneedToStart:\u003dfalse\nif agent.startOnce.Do(func(){needToStart\u003dtrue}); !needToStart {\n  return agent.getDevice(), nil\n}\n//else run startup",
      "revId": "929f91854c624289367bb5c98224e01e77e4365c",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2e4a27a5_d04fa8c6",
        "filename": "rw_core/core/device_agent.go",
        "patchSetId": 1
      },
      "lineNbr": 97,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2020-03-11T18:11:53Z",
      "side": 1,
      "message": "Will try it out.",
      "parentUuid": "18ffd107_9ecf6259",
      "revId": "929f91854c624289367bb5c98224e01e77e4365c",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "563620c5_e9e8c9f7",
        "filename": "rw_core/core/device_agent.go",
        "patchSetId": 1
      },
      "lineNbr": 110,
      "author": {
        "id": 1000218
      },
      "writtenOn": "2020-03-13T07:01:18Z",
      "side": 1,
      "message": "Should we consider if  we created the clusterDataProxy, registered callbacks and started requestSequencer successfully before?",
      "range": {
        "startLine": 110,
        "startChar": 5,
        "endLine": 110,
        "endChar": 10
      },
      "revId": "929f91854c624289367bb5c98224e01e77e4365c",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "60a0f921_9c843b81",
        "filename": "rw_core/core/device_agent.go",
        "patchSetId": 1
      },
      "lineNbr": 110,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2020-03-13T14:58:36Z",
      "side": 1,
      "message": "If this start fails then the agent will be removed by the calling function.   Also, this function is run only once.",
      "parentUuid": "563620c5_e9e8c9f7",
      "range": {
        "startLine": 110,
        "startChar": 5,
        "endLine": 110,
        "endChar": 10
      },
      "revId": "929f91854c624289367bb5c98224e01e77e4365c",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e1e9d5fc_c2d4c8c3",
        "filename": "rw_core/core/device_agent.go",
        "patchSetId": 1
      },
      "lineNbr": 146,
      "author": {
        "id": 1000218
      },
      "writtenOn": "2020-03-13T07:01:18Z",
      "side": 1,
      "message": "isn\u0027t it already cloned from deviceToCreate. Do we need to clone it again?",
      "range": {
        "startLine": 146,
        "startChar": 18,
        "endLine": 146,
        "endChar": 39
      },
      "revId": "929f91854c624289367bb5c98224e01e77e4365c",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b12003f1_64ee2446",
        "filename": "rw_core/core/device_agent.go",
        "patchSetId": 1
      },
      "lineNbr": 146,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2020-03-13T14:58:36Z",
      "side": 1,
      "message": "No need to clone here.",
      "parentUuid": "e1e9d5fc_c2d4c8c3",
      "range": {
        "startLine": 146,
        "startChar": 18,
        "endLine": 146,
        "endChar": 39
      },
      "revId": "929f91854c624289367bb5c98224e01e77e4365c",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "635d1de1_dac724d8",
        "filename": "rw_core/core/device_agent.go",
        "patchSetId": 1
      },
      "lineNbr": 151,
      "author": {
        "id": 1000218
      },
      "writtenOn": "2020-03-13T07:01:18Z",
      "side": 1,
      "message": "Device is already added to KV. Do we need to roll it back? Or how can we redo the rest.",
      "range": {
        "startLine": 151,
        "startChar": 3,
        "endLine": 151,
        "endChar": 9
      },
      "revId": "929f91854c624289367bb5c98224e01e77e4365c",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5bbbd90c_f6440790",
        "filename": "rw_core/core/device_agent.go",
        "patchSetId": 1
      },
      "lineNbr": 151,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2020-03-13T14:58:36Z",
      "side": 1,
      "message": "On error the calling function will stop the agent which will end up removing it.",
      "parentUuid": "635d1de1_dac724d8",
      "range": {
        "startLine": 151,
        "startChar": 3,
        "endLine": 151,
        "endChar": 9
      },
      "revId": "929f91854c624289367bb5c98224e01e77e4365c",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ec277320_180b0fb1",
        "filename": "rw_core/core/device_agent.go",
        "patchSetId": 1
      },
      "lineNbr": 241,
      "author": {
        "id": 1000107
      },
      "writtenOn": "2020-03-11T16:59:43Z",
      "side": 1,
      "message": "waitForGreenLight should accept a context, and exit early (leave the queue) if canceled.\n\n(This could be a separate jira.  If so, I would be willing to take this on.)",
      "range": {
        "startLine": 241,
        "startChar": 26,
        "endLine": 241,
        "endChar": 43
      },
      "revId": "929f91854c624289367bb5c98224e01e77e4365c",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "eff44f19_24d5ac25",
        "filename": "rw_core/core/device_agent.go",
        "patchSetId": 1
      },
      "lineNbr": 241,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2020-03-11T18:11:53Z",
      "side": 1,
      "message": "I will see if I can add it in this update.",
      "parentUuid": "ec277320_180b0fb1",
      "range": {
        "startLine": 241,
        "startChar": 26,
        "endLine": 241,
        "endChar": 43
      },
      "revId": "929f91854c624289367bb5c98224e01e77e4365c",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "abbff2ef_74d20e89",
        "filename": "rw_core/core/device_agent.go",
        "patchSetId": 1
      },
      "lineNbr": 271,
      "author": {
        "id": 1000107
      },
      "writtenOn": "2020-03-11T16:59:43Z",
      "side": 1,
      "message": "Should use ctx.Err() to return relevant info.",
      "revId": "929f91854c624289367bb5c98224e01e77e4365c",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "80980218_c22620c9",
        "filename": "rw_core/core/device_agent.go",
        "patchSetId": 1
      },
      "lineNbr": 361,
      "author": {
        "id": 1000107
      },
      "writtenOn": "2020-03-11T16:59:43Z",
      "side": 1,
      "message": "ctx.Err()",
      "revId": "929f91854c624289367bb5c98224e01e77e4365c",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0b274abb_48bffb1d",
        "filename": "rw_core/core/device_agent.go",
        "patchSetId": 1
      },
      "lineNbr": 737,
      "author": {
        "id": 1000107
      },
      "writtenOn": "2020-03-11T16:59:43Z",
      "side": 1,
      "message": "I\u0027m seeing this pattern a lot:\n1. Create context for timeout\n2. Start process w/ context.\n2.1. Cancel context if error.\n3. Start a thread to wait for process, and run actions based on success/failure.\n\nThis seems very much redundant, a thread is being started just to wait for some process to complete?  \n\nWhy not just start a single thread, and in that thread, call the process normally (without the channel-passing), check for errors, and continue/call other tasks normally?\n\nThe only good reason I can see to do this channel-passing \u0026 waiting, is if many processes are being created \u0026 run in parallel.",
      "revId": "929f91854c624289367bb5c98224e01e77e4365c",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5bc76b76_70cb124c",
        "filename": "rw_core/core/device_agent.go",
        "patchSetId": 1
      },
      "lineNbr": 737,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2020-03-11T18:11:53Z",
      "side": 1,
      "message": "This are async processing in the sense that the response is coming back from an adapter and during that time other requests can be made on that device, especially in the case of flows.",
      "parentUuid": "0b274abb_48bffb1d",
      "revId": "929f91854c624289367bb5c98224e01e77e4365c",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4910c6ed_66c4fd7c",
        "filename": "rw_core/core/device_manager.go",
        "patchSetId": 1
      },
      "lineNbr": 68,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2020-03-10T21:20:54Z",
      "side": 1,
      "message": "should this be specified as a duration and not an int?",
      "range": {
        "startLine": 68,
        "startChar": 42,
        "endLine": 68,
        "endChar": 72
      },
      "revId": "929f91854c624289367bb5c98224e01e77e4365c",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "22d5911a_47a20999",
        "filename": "rw_core/core/device_manager.go",
        "patchSetId": 1
      },
      "lineNbr": 68,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2020-03-11T18:11:53Z",
      "side": 1,
      "message": "Most of the \"time\" in the config (container params) are specified as int.   This can be addressed as a separate Jira (Vol-1875).",
      "parentUuid": "4910c6ed_66c4fd7c",
      "range": {
        "startLine": 68,
        "startChar": 42,
        "endLine": 68,
        "endChar": 72
      },
      "revId": "929f91854c624289367bb5c98224e01e77e4365c",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "acce39d0_ada312dc",
        "filename": "rw_core/core/device_manager.go",
        "patchSetId": 1
      },
      "lineNbr": 125,
      "author": {
        "id": 1000107
      },
      "writtenOn": "2020-03-11T16:59:43Z",
      "side": 1,
      "message": "ctx allows the caller to cancel the request, (for example, a ctrl-C on voltctl).  Are we sure the caller should have to wait for this?\n\nIf it\u0027s a long-running operation, it may make sense to run the load in a separate thread, so that this particular call can be cancelled \u0026 return, but still allow the load operation to continue in the background.",
      "revId": "929f91854c624289367bb5c98224e01e77e4365c",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "94db79de_3207c87b",
        "filename": "rw_core/core/device_manager.go",
        "patchSetId": 1
      },
      "lineNbr": 125,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2020-03-11T18:11:53Z",
      "side": 1,
      "message": "Can\u0027t remember why I removed the ctx there.  I am sure there was a reason (a test failure).  Will think about it.",
      "parentUuid": "acce39d0_ada312dc",
      "revId": "929f91854c624289367bb5c98224e01e77e4365c",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8c4ae9e8_2aaed682",
        "filename": "rw_core/core/device_manager.go",
        "patchSetId": 1
      },
      "lineNbr": 409,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2020-03-10T21:20:54Z",
      "side": 1,
      "message": "this is squelching the error if device isn\u0027t a *voltha.Device, but then the next statement dereferenced device.Id. if d isn\u0027t a *voltha.Device want this be an invalid reference? should you capture and check ok?",
      "range": {
        "startLine": 409,
        "startChar": 0,
        "endLine": 409,
        "endChar": 34
      },
      "revId": "929f91854c624289367bb5c98224e01e77e4365c",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bea3cc95_2963ef2c",
        "filename": "rw_core/core/device_manager.go",
        "patchSetId": 1
      },
      "lineNbr": 409,
      "author": {
        "id": 1000107
      },
      "writtenOn": "2020-03-11T16:59:43Z",
      "side": 1,
      "message": "If certain that this is always a device, use the single-value form:\n\ndevice :\u003d d.(*voltha.Device)\n\nThis will panic properly if an invalid type is found.",
      "parentUuid": "8c4ae9e8_2aaed682",
      "range": {
        "startLine": 409,
        "startChar": 0,
        "endLine": 409,
        "endChar": 34
      },
      "revId": "929f91854c624289367bb5c98224e01e77e4365c",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "80e30c2a_3bdfbf97",
        "filename": "rw_core/core/device_manager.go",
        "patchSetId": 1
      },
      "lineNbr": 409,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2020-03-11T18:11:53Z",
      "side": 1,
      "message": "I will use the single-value-form and let it panic.   Should \"never\"happen.",
      "parentUuid": "bea3cc95_2963ef2c",
      "range": {
        "startLine": 409,
        "startChar": 0,
        "endLine": 409,
        "endChar": 34
      },
      "revId": "929f91854c624289367bb5c98224e01e77e4365c",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "14755d9a_464d7f29",
        "filename": "rw_core/core/device_manager.go",
        "patchSetId": 1
      },
      "lineNbr": 414,
      "author": {
        "id": 1000107
      },
      "writtenOn": "2020-03-11T16:59:43Z",
      "side": 1,
      "message": "Again: Should ctrl-C / cancelation be broken if startup takes a long time?  Run load operation in separate thread to allow the call to return quickly if canceled?",
      "revId": "929f91854c624289367bb5c98224e01e77e4365c",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dd91dff1_ed3cb6df",
        "filename": "rw_core/core/device_manager.go",
        "patchSetId": 1
      },
      "lineNbr": 414,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2020-03-11T18:11:53Z",
      "side": 1,
      "message": "Will need to run something in the background.  Will need to revisit this function as its an expensive operation on the Core, especially under heavy load and lots of devices",
      "parentUuid": "14755d9a_464d7f29",
      "revId": "929f91854c624289367bb5c98224e01e77e4365c",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cc3c64fd_13aff31f",
        "filename": "rw_core/core/device_manager.go",
        "patchSetId": 1
      },
      "lineNbr": 699,
      "author": {
        "id": 1000107
      },
      "writtenOn": "2020-03-11T16:59:43Z",
      "side": 1,
      "message": "The utils.Response type exists to avoid the complexity (and fragility) of raw channel signaling, consider changing reconcileDevice() to return a utils.Response instead of a raw channel.",
      "revId": "929f91854c624289367bb5c98224e01e77e4365c",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f40022b8_75ea6f3a",
        "filename": "rw_core/core/device_manager.go",
        "patchSetId": 1
      },
      "lineNbr": 699,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2020-03-11T18:11:53Z",
      "side": 1,
      "message": "The adapter proxy functions returns a channel that is created by the kafka library and contains more information than utils.Response.   Changing reconcileDevice to return a utils.Response will just move this code to the adapter proxy for this function.",
      "parentUuid": "cc3c64fd_13aff31f",
      "revId": "929f91854c624289367bb5c98224e01e77e4365c",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6e15249c_10875dfc",
        "filename": "rw_core/core/device_state_transitions.go",
        "patchSetId": 1
      },
      "lineNbr": 37,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2020-03-10T21:20:54Z",
      "side": 1,
      "message": "any reason not using iota?",
      "range": {
        "startLine": 37,
        "startChar": 22,
        "endLine": 37,
        "endChar": 23
      },
      "revId": "929f91854c624289367bb5c98224e01e77e4365c",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bd5d34cb_5cc67af8",
        "filename": "rw_core/core/device_state_transitions.go",
        "patchSetId": 1
      },
      "lineNbr": 37,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2020-03-11T18:11:53Z",
      "side": 1,
      "message": "Nope, will change",
      "parentUuid": "6e15249c_10875dfc",
      "range": {
        "startLine": 37,
        "startChar": 22,
        "endLine": 37,
        "endChar": 23
      },
      "revId": "929f91854c624289367bb5c98224e01e77e4365c",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c6883fdb_e7945450",
        "filename": "rw_core/core/device_state_transitions.go",
        "patchSetId": 1
      },
      "lineNbr": 48,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2020-03-10T21:20:54Z",
      "side": 1,
      "message": "could be written as \ntype match struct {\n    admin, oper, conn uint8\n}",
      "range": {
        "startLine": 44,
        "startChar": 0,
        "endLine": 48,
        "endChar": 1
      },
      "revId": "929f91854c624289367bb5c98224e01e77e4365c",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1ab15cdf_dc963329",
        "filename": "rw_core/core/device_state_transitions.go",
        "patchSetId": 1
      },
      "lineNbr": 48,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2020-03-11T18:11:53Z",
      "side": 1,
      "message": "ok",
      "parentUuid": "c6883fdb_e7945450",
      "range": {
        "startLine": 44,
        "startChar": 0,
        "endLine": 48,
        "endChar": 1
      },
      "revId": "929f91854c624289367bb5c98224e01e77e4365c",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7c3f9cd7_6d7fc54c",
        "filename": "rw_core/core/device_state_transitions.go",
        "patchSetId": 1
      },
      "lineNbr": 278,
      "author": {
        "id": 1000107
      },
      "writtenOn": "2020-03-11T17:27:37Z",
      "side": 1,
      "message": "If getDeviceState() returned DeviceState{} instead of *DeviceState{}, these would be comparable with \u003d\u003d.\n\nOnly getDeviceStates() \u0026 getHandler() use the pointer version currently.\n\nAlternatively, can safely compare using:\n\n`if *pState \u003d\u003d *cState {`",
      "range": {
        "startLine": 278,
        "startChar": 4,
        "endLine": 278,
        "endChar": 21
      },
      "revId": "929f91854c624289367bb5c98224e01e77e4365c",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6b605245_dfb8e613",
        "filename": "rw_core/core/device_state_transitions.go",
        "patchSetId": 1
      },
      "lineNbr": 278,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2020-03-11T18:11:53Z",
      "side": 1,
      "message": "I thought I started with that but the comparison was not working.  Let me give it a try again.",
      "parentUuid": "7c3f9cd7_6d7fc54c",
      "range": {
        "startLine": 278,
        "startChar": 4,
        "endLine": 278,
        "endChar": 21
      },
      "revId": "929f91854c624289367bb5c98224e01e77e4365c",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "70414980_7e43ff9a",
        "filename": "rw_core/core/device_state_transitions_test.go",
        "patchSetId": 1
      },
      "lineNbr": 211,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2020-03-10T21:20:54Z",
      "side": 1,
      "message": "seems like a lot of repetitive code. could be rewritten using an anonymous struct to define input/expected outputs and then use t.Run to run each row of data as a subtest.",
      "range": {
        "startLine": 183,
        "startChar": 0,
        "endLine": 211,
        "endChar": 109
      },
      "revId": "929f91854c624289367bb5c98224e01e77e4365c",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "44629b15_5cd6d1a7",
        "filename": "rw_core/core/device_state_transitions_test.go",
        "patchSetId": 1
      },
      "lineNbr": 211,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2020-03-11T18:11:53Z",
      "side": 1,
      "message": "ok, will do.",
      "parentUuid": "70414980_7e43ff9a",
      "range": {
        "startLine": 183,
        "startChar": 0,
        "endLine": 211,
        "endChar": 109
      },
      "revId": "929f91854c624289367bb5c98224e01e77e4365c",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f55065b6_c3e3b1e0",
        "filename": "rw_core/core/logical_device_agent.go",
        "patchSetId": 1
      },
      "lineNbr": 61,
      "author": {
        "id": 1000107
      },
      "writtenOn": "2020-03-11T17:27:37Z",
      "side": 1,
      "message": "Consider moving the queuing logic into its own type, and using embedding, to avoid repeating code.",
      "revId": "929f91854c624289367bb5c98224e01e77e4365c",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a9a6d1e8_3856b0fd",
        "filename": "rw_core/core/logical_device_agent.go",
        "patchSetId": 1
      },
      "lineNbr": 81,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2020-03-10T21:20:54Z",
      "side": 1,
      "message": "ti think this should just be time.Millisecond * timeout? Or even better make the parameter timeout a time.Duration.",
      "range": {
        "startLine": 81,
        "startChar": 24,
        "endLine": 81,
        "endChar": 65
      },
      "revId": "929f91854c624289367bb5c98224e01e77e4365c",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8b1ba7d8_a6ebf300",
        "filename": "rw_core/core/logical_device_agent.go",
        "patchSetId": 1
      },
      "lineNbr": 92,
      "author": {
        "id": 1000107
      },
      "writtenOn": "2020-03-11T17:27:37Z",
      "side": 1,
      "message": "Again: Consider just setting a flag, and exiting early if already started.",
      "revId": "929f91854c624289367bb5c98224e01e77e4365c",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c92418ca_b08a56e2",
        "filename": "rw_core/core/logical_device_agent.go",
        "patchSetId": 1
      },
      "lineNbr": 98,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2020-03-10T21:20:54Z",
      "side": 1,
      "message": "return err don\u0027t log?",
      "range": {
        "startLine": 98,
        "startChar": 0,
        "endLine": 98,
        "endChar": 73
      },
      "revId": "929f91854c624289367bb5c98224e01e77e4365c",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "14648212_60f4ace3",
        "filename": "rw_core/core/logical_device_agent.go",
        "patchSetId": 1
      },
      "lineNbr": 98,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2020-03-11T18:11:53Z",
      "side": 1,
      "message": "ok",
      "parentUuid": "c92418ca_b08a56e2",
      "range": {
        "startLine": 98,
        "startChar": 0,
        "endLine": 98,
        "endChar": 73
      },
      "revId": "929f91854c624289367bb5c98224e01e77e4365c",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "be76a2ec_aa990a8e",
        "filename": "rw_core/core/logical_device_agent.go",
        "patchSetId": 1
      },
      "lineNbr": 228,
      "author": {
        "id": 1000107
      },
      "writtenOn": "2020-03-11T17:27:37Z",
      "side": 1,
      "message": "Set flag \u0026 exit early here as well?  (Though this is a smaller function, so may actually be less clear.)",
      "revId": "929f91854c624289367bb5c98224e01e77e4365c",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7419d16c_9c0b694f",
        "filename": "rw_core/core/logical_device_manager.go",
        "patchSetId": 1
      },
      "lineNbr": 198,
      "author": {
        "id": 1000107
      },
      "writtenOn": "2020-03-11T17:27:37Z",
      "side": 1,
      "message": "Would it be convenient to have a small utility function `utils.PrintErr()` to allow for inline, error-handled gothreads:\n\ngo utils.PrintErr(agent.start(context.Background(), false))",
      "range": {
        "startLine": 193,
        "startChar": 1,
        "endLine": 198,
        "endChar": 4
      },
      "revId": "929f91854c624289367bb5c98224e01e77e4365c",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9f23283d_02fea451",
        "filename": "rw_core/core/logical_device_manager.go",
        "patchSetId": 1
      },
      "lineNbr": 198,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2020-03-11T18:11:53Z",
      "side": 1,
      "message": "Good idea.   If i have time will take a look.",
      "parentUuid": "7419d16c_9c0b694f",
      "range": {
        "startLine": 193,
        "startChar": 1,
        "endLine": 198,
        "endChar": 4
      },
      "revId": "929f91854c624289367bb5c98224e01e77e4365c",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a982f7c2_fa582e8b",
        "filename": "rw_core/utils/core_utils.go",
        "patchSetId": 1
      },
      "lineNbr": 131,
      "author": {
        "id": 1000107
      },
      "writtenOn": "2020-03-11T17:27:37Z",
      "side": 1,
      "message": "Again: I think the queue should have its own type, to hide the internal logic \u0026 format from other parts of the code.\n\nThis type could behave like a well-ordered mutex, with a cancelable `Lock(ctx)` function.",
      "range": {
        "startLine": 131,
        "startChar": 38,
        "endLine": 131,
        "endChar": 102
      },
      "revId": "929f91854c624289367bb5c98224e01e77e4365c",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7f10c8da_6f39080e",
        "filename": "rw_core/utils/core_utils.go",
        "patchSetId": 1
      },
      "lineNbr": 131,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2020-03-11T18:11:53Z",
      "side": 1,
      "message": "Will create its own type.",
      "parentUuid": "a982f7c2_fa582e8b",
      "range": {
        "startLine": 131,
        "startChar": 38,
        "endLine": 131,
        "endChar": 102
      },
      "revId": "929f91854c624289367bb5c98224e01e77e4365c",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    }
  ]
}