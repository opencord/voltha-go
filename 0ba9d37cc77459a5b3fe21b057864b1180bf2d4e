{
  "comments": [
    {
      "key": {
        "uuid": "42740ee4_b4e3164e",
        "filename": "common/probe/probe.go",
        "patchSetId": 6
      },
      "lineNbr": 57,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-09-24T15:46:27Z",
      "side": 1,
      "message": "Can this just pull from a pre-defined map[ServiceStatus]string ?",
      "revId": "0ba9d37cc77459a5b3fe21b057864b1180bf2d4e",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ade20e44_9e4063f6",
        "filename": "common/probe/probe.go",
        "patchSetId": 6
      },
      "lineNbr": 57,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2019-09-24T15:58:39Z",
      "side": 1,
      "message": "yes, is there a benefit of a pre-defined map vs a switch in this case?",
      "parentUuid": "42740ee4_b4e3164e",
      "revId": "0ba9d37cc77459a5b3fe21b057864b1180bf2d4e",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "90c37f08_2c16de8d",
        "filename": "common/probe/probe.go",
        "patchSetId": 6
      },
      "lineNbr": 101,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-09-24T15:46:27Z",
      "side": 1,
      "message": "Could just be a void func as it takes a reference anyway?",
      "revId": "0ba9d37cc77459a5b3fe21b057864b1180bf2d4e",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a4db8726_13411a97",
        "filename": "common/probe/probe.go",
        "patchSetId": 6
      },
      "lineNbr": 101,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2019-09-24T15:58:39Z",
      "side": 1,
      "message": "A bit of a legacy here. Originally I have more than a single \"With\" function so this allowed chaining. but yes, with a single With function it makes less sense. I wonder if I should split WithHealthFunc and WithReadyFunc?",
      "parentUuid": "90c37f08_2c16de8d",
      "revId": "0ba9d37cc77459a5b3fe21b057864b1180bf2d4e",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "487b2c81_7ed50ced",
        "filename": "common/probe/probe.go",
        "patchSetId": 6
      },
      "lineNbr": 116,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2019-09-24T14:08:26Z",
      "side": 1,
      "message": "Would defer the unlock be better?",
      "revId": "0ba9d37cc77459a5b3fe21b057864b1180bf2d4e",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c650b037_4606c2bf",
        "filename": "common/probe/probe.go",
        "patchSetId": 6
      },
      "lineNbr": 116,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2019-09-24T15:54:00Z",
      "side": 1,
      "message": "I thought about using defers, not sure it makes much of a difference as the only what to exit is a panic error at some low level, in which case all hope is lost. Is there a \"best practice\" in this instance? is defer preferred?",
      "parentUuid": "487b2c81_7ed50ced",
      "revId": "0ba9d37cc77459a5b3fe21b057864b1180bf2d4e",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "808463f8_0cd45f4a",
        "filename": "common/probe/probe.go",
        "patchSetId": 6
      },
      "lineNbr": 144,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-09-24T15:46:27Z",
      "side": 1,
      "message": "defer might be better after Lock",
      "revId": "0ba9d37cc77459a5b3fe21b057864b1180bf2d4e",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a930e1a0_85c10fad",
        "filename": "common/probe/probe.go",
        "patchSetId": 6
      },
      "lineNbr": 144,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2019-09-24T15:58:39Z",
      "side": 1,
      "message": "ok, 2 votes for deferring in reviews, will change. although I still think there isn\u0027t a substantive difference in this case.",
      "parentUuid": "808463f8_0cd45f4a",
      "revId": "0ba9d37cc77459a5b3fe21b057864b1180bf2d4e",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ae47bfc3_0dc5e0c0",
        "filename": "common/probe/probe.go",
        "patchSetId": 6
      },
      "lineNbr": 153,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2019-09-24T14:08:26Z",
      "side": 1,
      "message": "why not using \"StatusServiceUnavailable\" instead of a fresh brew of tea?",
      "revId": "0ba9d37cc77459a5b3fe21b057864b1180bf2d4e",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5910b8b3_d70011f5",
        "filename": "common/probe/probe.go",
        "patchSetId": 6
      },
      "lineNbr": 153,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2019-09-24T15:54:00Z",
      "side": 1,
      "message": "I really debated with myself what was the correct error here. From a k8s point of view anything 400+ works. To me, ServicUnavailable is if the REST request and be processed (which it can) v the functions of the pod are available. Again, I don\u0027t really have a preference here other than the oddity of using Teapot :)",
      "parentUuid": "ae47bfc3_0dc5e0c0",
      "revId": "0ba9d37cc77459a5b3fe21b057864b1180bf2d4e",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3bcf332c_35cf2601",
        "filename": "common/probe/probe.go",
        "patchSetId": 6
      },
      "lineNbr": 155,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-09-24T15:46:27Z",
      "side": 1,
      "message": "defer after RLock should suffice?",
      "revId": "0ba9d37cc77459a5b3fe21b057864b1180bf2d4e",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a5ab3823_f3ffbb39",
        "filename": "common/probe/probe.go",
        "patchSetId": 6
      },
      "lineNbr": 155,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2019-09-24T15:58:39Z",
      "side": 1,
      "message": "will change. I debated deferring v. this approach. given you can\u0027t exit the func other than a lower level panic I don\u0027t think it really matters.",
      "parentUuid": "3bcf332c_35cf2601",
      "revId": "0ba9d37cc77459a5b3fe21b057864b1180bf2d4e",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6e9f2ebd_6aed9a91",
        "filename": "rw_core/core/core.go",
        "patchSetId": 6
      },
      "lineNbr": 183,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2019-09-24T14:08:26Z",
      "side": 1,
      "message": "Could use a channel to at least report everything on the grpc level is fine right before the grpc server starts serving.",
      "revId": "0ba9d37cc77459a5b3fe21b057864b1180bf2d4e",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dfd08c36_d005e295",
        "filename": "rw_core/core/core.go",
        "patchSetId": 6
      },
      "lineNbr": 183,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2019-09-24T15:54:00Z",
      "side": 1,
      "message": "I was originally using channels for service updates. It really doesn\u0027t make a substantive difference (channel v. sync call). I think in both cases you might get a \"Running\" quickly followed by a \"Stopped\" so not introducing a channel (although i like channels) seems a bit of an overhead.",
      "parentUuid": "6e9f2ebd_6aed9a91",
      "revId": "0ba9d37cc77459a5b3fe21b057864b1180bf2d4e",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    }
  ]
}