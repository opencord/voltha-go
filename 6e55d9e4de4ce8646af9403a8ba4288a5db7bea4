{
  "comments": [
    {
      "key": {
        "uuid": "89eaa6ca_93f78c02",
        "filename": "rw_core/core/logical_device_agent.go",
        "patchSetId": 1
      },
      "lineNbr": 134,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2019-12-13T15:37:29Z",
      "side": 1,
      "message": "This creates a dependency that you can\u0027t control. As the agent was created outside of the func is fine to let the caller deal with the agent in an error case, but as the logical device was \"started\" or \"partially created\" in this func should this func clean that up in the case of an error?",
      "revId": "6e55d9e4de4ce8646af9403a8ba4288a5db7bea4",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9986ff8b_486db935",
        "filename": "rw_core/core/logical_device_agent.go",
        "patchSetId": 1
      },
      "lineNbr": 134,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2019-12-13T15:45:01Z",
      "side": 1,
      "message": "The failure in this \"else\" is when the agent is started upon a load from dB request.  Either the data exist or does not.  On failure the agent itself is stopped and deleted.  So no data cleanup is required in this case.",
      "parentUuid": "89eaa6ca_93f78c02",
      "revId": "6e55d9e4de4ce8646af9403a8ba4288a5db7bea4",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8532042b_6d61e8c5",
        "filename": "rw_core/core/logical_device_agent.go",
        "patchSetId": 1
      },
      "lineNbr": 134,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2019-12-13T15:54:09Z",
      "side": 1,
      "message": "yes, I understand. but the this function leaves `agent.logicalDevice` in an incomplete state and expects the caller to understand how to correctly clean up that incomplete state. The concern/question is, would it be cleaner if the func that creates a partial state cleans that up as it is really the only one that knows that partial state.\n\nThis is a package internal func, so perhaps it isn\u0027t critical here, but just a question.",
      "parentUuid": "9986ff8b_486db935",
      "revId": "6e55d9e4de4ce8646af9403a8ba4288a5db7bea4",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ecc5e152_9d7b4682",
        "filename": "rw_core/core/logical_device_agent.go",
        "patchSetId": 1
      },
      "lineNbr": 134,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2019-12-13T16:01:20Z",
      "side": 1,
      "message": "Your point is valid for the general case.  However, in this scenario the states per say are internal to the logicaldevice agent itself and the calling function deleted this agent, hence the agent.logicalDevice is gone as well.",
      "parentUuid": "8532042b_6d61e8c5",
      "revId": "6e55d9e4de4ce8646af9403a8ba4288a5db7bea4",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a4d46021_a5fe5e56",
        "filename": "vendor/github.com/opencord/voltha-lib-go/v2/pkg/db/common.go",
        "patchSetId": 1
      },
      "lineNbr": 27,
      "author": {
        "id": 1000107
      },
      "writtenOn": "2019-12-13T15:10:21Z",
      "side": 1,
      "message": "What does this have to do with unit tests?",
      "revId": "6e55d9e4de4ce8646af9403a8ba4288a5db7bea4",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f8914058_cb046767",
        "filename": "vendor/github.com/opencord/voltha-lib-go/v2/pkg/db/common.go",
        "patchSetId": 1
      },
      "lineNbr": 27,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2019-12-13T15:15:29Z",
      "side": 1,
      "message": "The previous name of that file was common_test.go.  Therefore when this file was not brought down when importing the package in the unit tests in this scenario.   Without it the unit tests cannot control the logging level of this db package hence leading to lots of unnecessary logs on jenkins and potentially masking real errors.",
      "parentUuid": "a4d46021_a5fe5e56",
      "revId": "6e55d9e4de4ce8646af9403a8ba4288a5db7bea4",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "21c9d7b3_b5534bab",
        "filename": "vendor/github.com/opencord/voltha-lib-go/v2/pkg/mocks/common.go",
        "patchSetId": 1
      },
      "lineNbr": 27,
      "author": {
        "id": 1000107
      },
      "writtenOn": "2019-12-13T15:10:21Z",
      "side": 1,
      "message": "What does this have to do with unit tests?",
      "revId": "6e55d9e4de4ce8646af9403a8ba4288a5db7bea4",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "91bf4ca7_f73a7e09",
        "filename": "vendor/github.com/opencord/voltha-lib-go/v2/pkg/mocks/common.go",
        "patchSetId": 1
      },
      "lineNbr": 27,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2019-12-13T15:15:29Z",
      "side": 1,
      "message": "See other comments",
      "parentUuid": "21c9d7b3_b5534bab",
      "revId": "6e55d9e4de4ce8646af9403a8ba4288a5db7bea4",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    }
  ]
}