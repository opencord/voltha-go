{
  "comments": [
    {
      "key": {
        "uuid": "9ffb7fca_02a52405",
        "filename": "afrouter/afrouter/request.go",
        "patchSetId": 2
      },
      "lineNbr": 98,
      "author": {
        "id": 1000107
      },
      "writtenOn": "2019-09-17T23:37:02Z",
      "side": 1,
      "message": "Single-threaded use of sync.Once",
      "revId": "507cec9a5b037784cd47a4e19d33d1adb57bca79",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b008dc4c_ef66cebe",
        "filename": "afrouter/afrouter/request.go",
        "patchSetId": 2
      },
      "lineNbr": 98,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-09-17T23:58:09Z",
      "side": 1,
      "message": "It is intentional as the code needs to be run only once for both the threads to extract the key",
      "parentUuid": "9ffb7fca_02a52405",
      "revId": "507cec9a5b037784cd47a4e19d33d1adb57bca79",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "298ea33d_428466d2",
        "filename": "afrouter/afrouter/request.go",
        "patchSetId": 2
      },
      "lineNbr": 131,
      "author": {
        "id": 1000107
      },
      "writtenOn": "2019-09-17T23:37:02Z",
      "side": 1,
      "message": "This does not account for the case where multiple cores return the key.\n\nIt may be theoretically impossible in the cores, but a faulty double-response this will cause cascading issues in the afrouter.",
      "revId": "507cec9a5b037784cd47a4e19d33d1adb57bca79",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b6944649_eb474fb1",
        "filename": "afrouter/afrouter/request.go",
        "patchSetId": 2
      },
      "lineNbr": 131,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-09-17T23:58:09Z",
      "side": 1,
      "message": "streamHeaderOnce is a local var. Both cores would return the key and both threads for streams would run that code only once to determine whether the transaction was processed. That was the intention.",
      "parentUuid": "298ea33d_428466d2",
      "revId": "507cec9a5b037784cd47a4e19d33d1adb57bca79",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba9c1675_5a09287c",
        "filename": "afrouter/afrouter/request.go",
        "patchSetId": 2
      },
      "lineNbr": 131,
      "author": {
        "id": 1000107
      },
      "writtenOn": "2019-09-18T16:18:02Z",
      "side": 1,
      "message": "See line 156.  activeStream _must_ be set by at least one, and only one, stream.  Else the request will never be cleaned up.\n\nIn the case of an issue where more than one core processed a request, or where no core processes a request, the afrouter will have issues.",
      "parentUuid": "b6944649_eb474fb1",
      "revId": "507cec9a5b037784cd47a4e19d33d1adb57bca79",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "eafb22a6_cdad8eb0",
        "filename": "afrouter/afrouter/request.go",
        "patchSetId": 2
      },
      "lineNbr": 201,
      "author": {
        "id": 1000107
      },
      "writtenOn": "2019-09-17T23:37:02Z",
      "side": 1,
      "message": "Remove commented code.",
      "revId": "507cec9a5b037784cd47a4e19d33d1adb57bca79",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "41f4bbdb_3799e176",
        "filename": "afrouter/afrouter/request.go",
        "patchSetId": 2
      },
      "lineNbr": 201,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2019-09-18T18:47:13Z",
      "side": 1,
      "message": "Will do",
      "parentUuid": "eafb22a6_cdad8eb0",
      "revId": "507cec9a5b037784cd47a4e19d33d1adb57bca79",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b6f84609_92ec6911",
        "filename": "ro_core/core/grpc_nbi_api_handler.go",
        "patchSetId": 2
      },
      "lineNbr": 61,
      "author": {
        "id": 1000107
      },
      "writtenOn": "2019-09-17T23:37:02Z",
      "side": 1,
      "message": "This function returns an error, but is called with defer, so the error is ignored.",
      "revId": "507cec9a5b037784cd47a4e19d33d1adb57bca79",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c8fee642_ede4a899",
        "filename": "ro_core/core/grpc_nbi_api_handler.go",
        "patchSetId": 2
      },
      "lineNbr": 61,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2019-09-18T13:38:54Z",
      "side": 1,
      "message": "The only time an error might occur when setting the grpc header is if that grpc context is invalid.  In such a scenario, the caller of this function can\u0027t do anything with that error as it can\u0027t even send a response back with an invalid context.   \n\nThe other option would be to not return an error and then the question would be why not return an error?",
      "parentUuid": "b6f84609_92ec6911",
      "revId": "507cec9a5b037784cd47a4e19d33d1adb57bca79",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ee6925e0_3289680a",
        "filename": "ro_core/core/grpc_nbi_api_handler.go",
        "patchSetId": 2
      },
      "lineNbr": 61,
      "author": {
        "id": 1000107
      },
      "writtenOn": "2019-09-18T16:18:02Z",
      "side": 1,
      "message": "I was trying to imply that an error should be logged, cause a panic, or just be ignored.  Returning it is confusing \u0026 unhelpful.",
      "parentUuid": "c8fee642_ede4a899",
      "revId": "507cec9a5b037784cd47a4e19d33d1adb57bca79",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "746250a1_8a5969ba",
        "filename": "ro_core/core/grpc_nbi_api_handler.go",
        "patchSetId": 2
      },
      "lineNbr": 94,
      "author": {
        "id": 1000107
      },
      "writtenOn": "2019-09-17T23:37:02Z",
      "side": 1,
      "message": "Defer is called even in case of an error or panic, but always sets the header to true?",
      "revId": "507cec9a5b037784cd47a4e19d33d1adb57bca79",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "241f50a6_b9064910",
        "filename": "ro_core/core/grpc_nbi_api_handler.go",
        "patchSetId": 2
      },
      "lineNbr": 94,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2019-09-18T13:38:54Z",
      "side": 1,
      "message": "Yes, because it\u0027s the read-only core and it has to handle every request.  The metadata is an indication of whether a core handles a request, it does not imply that the request has been successful or not.",
      "parentUuid": "746250a1_8a5969ba",
      "revId": "507cec9a5b037784cd47a4e19d33d1adb57bca79",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "27790382_22468a2a",
        "filename": "ro_core/core/grpc_nbi_api_handler.go",
        "patchSetId": 2
      },
      "lineNbr": 94,
      "author": {
        "id": 1000107
      },
      "writtenOn": "2019-09-18T16:18:02Z",
      "side": 1,
      "message": "Would it make sense to reverse this then?  Only set the metadata if the core did _not_ handle the request?\n\nCould remove many redundant lines of code.",
      "parentUuid": "241f50a6_b9064910",
      "revId": "507cec9a5b037784cd47a4e19d33d1adb57bca79",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "feecf671_b9161aff",
        "filename": "rw_core/core/grpc_nbi_api_handler.go",
        "patchSetId": 2
      },
      "lineNbr": 95,
      "author": {
        "id": 1000107
      },
      "writtenOn": "2019-09-17T23:37:02Z",
      "side": 1,
      "message": "Again, return value from function called with defer.  The error will be ignored, no reason to return it.",
      "revId": "507cec9a5b037784cd47a4e19d33d1adb57bca79",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "448ceb81_5056ffca",
        "filename": "rw_core/core/grpc_nbi_api_handler.go",
        "patchSetId": 2
      },
      "lineNbr": 95,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2019-09-18T13:38:54Z",
      "side": 1,
      "message": "The function is doing an action that can return an error.  It should therefore return one. It\u0027s up to the callee to do something with it or not depending on the context.",
      "parentUuid": "feecf671_b9161aff",
      "revId": "507cec9a5b037784cd47a4e19d33d1adb57bca79",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "25015048_2f314dcd",
        "filename": "rw_core/core/grpc_nbi_api_handler.go",
        "patchSetId": 2
      },
      "lineNbr": 234,
      "author": {
        "id": 1000107
      },
      "writtenOn": "2019-09-17T23:37:02Z",
      "side": 1,
      "message": "if processed was passed as a pointer, the use of an anonymous function would be unnecessary.",
      "revId": "507cec9a5b037784cd47a4e19d33d1adb57bca79",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7db36556_ae3edd6e",
        "filename": "rw_core/core/grpc_nbi_api_handler.go",
        "patchSetId": 2
      },
      "lineNbr": 234,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2019-09-18T13:38:54Z",
      "side": 1,
      "message": "Good point.   Will update if there are any major changes required.",
      "parentUuid": "25015048_2f314dcd",
      "revId": "507cec9a5b037784cd47a4e19d33d1adb57bca79",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    }
  ]
}