{
  "comments": [
    {
      "key": {
        "uuid": "e5be0240_90075f86",
        "filename": "rw_core/core/device_manager.go",
        "patchSetId": 1
      },
      "lineNbr": 395,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2019-09-06T01:30:48Z",
      "side": 1,
      "message": "seems an odd word to have all by itself in a comment. is it a plea for sanity?",
      "range": {
        "startLine": 395,
        "startChar": 4,
        "endLine": 395,
        "endChar": 10
      },
      "revId": "de6cd32c26d3360e508d7dc940b0e9c01a1d584c",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "076023f5_a687cafa",
        "filename": "rw_core/core/device_manager.go",
        "patchSetId": 1
      },
      "lineNbr": 395,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2019-09-06T13:07:02Z",
      "side": 1,
      "message": "Yup , a plea for sanity",
      "parentUuid": "e5be0240_90075f86",
      "range": {
        "startLine": 395,
        "startChar": 4,
        "endLine": 395,
        "endChar": 10
      },
      "revId": "de6cd32c26d3360e508d7dc940b0e9c01a1d584c",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cb966395_fe4dd497",
        "filename": "rw_core/core/device_manager.go",
        "patchSetId": 1
      },
      "lineNbr": 400,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2019-09-06T01:30:48Z",
      "side": 1,
      "message": "Is this lock per device ID, or are all adds serialized",
      "range": {
        "startLine": 400,
        "startChar": 6,
        "endLine": 400,
        "endChar": 23
      },
      "revId": "de6cd32c26d3360e508d7dc940b0e9c01a1d584c",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7fd0151b_baff44ed",
        "filename": "rw_core/core/device_manager.go",
        "patchSetId": 1
      },
      "lineNbr": 400,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2019-09-06T13:07:02Z",
      "side": 1,
      "message": "The lock is there just to make sure another call to add the same device (at the same time) does not result in multiple adds.  If there are two different devices being added then their addition  into the device agent map will be serialized.  Once added then they can proceed independently.",
      "parentUuid": "cb966395_fe4dd497",
      "range": {
        "startLine": 400,
        "startChar": 6,
        "endLine": 400,
        "endChar": 23
      },
      "revId": "de6cd32c26d3360e508d7dc940b0e9c01a1d584c",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f4468ea5_8b9eac57",
        "filename": "rw_core/core/device_manager.go",
        "patchSetId": 1
      },
      "lineNbr": 400,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-09-06T18:20:54Z",
      "side": 1,
      "message": "I don\u0027t think this lock is required. \nSince the device agents map is a \"sync\" map, the load is safe for multiple threads even for the same device. \nConsidering that, the cache hit would result in the second guy not doing anything. \nThis also seems to result in another lock on top of root device lock which already exists for root device loading. \nThis lock can be safely removed.",
      "parentUuid": "7fd0151b_baff44ed",
      "range": {
        "startLine": 400,
        "startChar": 6,
        "endLine": 400,
        "endChar": 23
      },
      "revId": "de6cd32c26d3360e508d7dc940b0e9c01a1d584c",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a45bcc13_c5743b39",
        "filename": "rw_core/core/device_manager.go",
        "patchSetId": 1
      },
      "lineNbr": 410,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2019-09-06T01:30:48Z",
      "side": 1,
      "message": "this delete is not happening within the mutex, which means another thread might try to be adding this device at the same time this one is deleting it?",
      "range": {
        "startLine": 410,
        "startChar": 9,
        "endLine": 410,
        "endChar": 33
      },
      "revId": "de6cd32c26d3360e508d7dc940b0e9c01a1d584c",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9101c2ce_94de51bc",
        "filename": "rw_core/core/device_manager.go",
        "patchSetId": 1
      },
      "lineNbr": 410,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2019-09-06T13:07:02Z",
      "side": 1,
      "message": "The device agent map is a sync map, hence only one action will take place,   The \"lockloadingdevice\" lock is not to protect the map, it\u0027s to protect the map.",
      "parentUuid": "a45bcc13_c5743b39",
      "range": {
        "startLine": 410,
        "startChar": 9,
        "endLine": 410,
        "endChar": 33
      },
      "revId": "de6cd32c26d3360e508d7dc940b0e9c01a1d584c",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "26fc5d8c_d7583ffe",
        "filename": "rw_core/core/device_manager.go",
        "patchSetId": 1
      },
      "lineNbr": 410,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2019-09-06T14:19:55Z",
      "side": 1,
      "message": "my concern is that when the unlock at line 407 is executed by thread (A), then thread (B) may then proceed past line 400. At this point, if IsDeviceInCache essentially checks the \"map\" for entry existence then this may return true for thread (B), but then right after that check, the map entry may be deleted by thread (A) at line 410.\n\nI get that the mutex is meant to help serialize adds and not protect the map, but i am wondering that if in this case, the delete outside protection may cause an issue with the checking for existence logic.\n\nHaven\u0027t done a real deep dive on the code, so could be way off.",
      "parentUuid": "9101c2ce_94de51bc",
      "range": {
        "startLine": 410,
        "startChar": 9,
        "endLine": 410,
        "endChar": 33
      },
      "revId": "de6cd32c26d3360e508d7dc940b0e9c01a1d584c",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "71a7899e_8f37ad98",
        "filename": "rw_core/core/device_manager.go",
        "patchSetId": 1
      },
      "lineNbr": 410,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2019-09-06T14:39:02Z",
      "side": 1,
      "message": "In your example with Thread A and B trying to load the same device:  It\u0027s true that Thread A can delete the device right before Thread B returns true.  This scenario will occur only in the case where loading of a device results in a failure.  The action of loading a device is very basic, hence if Thread A fails then thread B would have likely failed as well (especially since these two Thread must be running close to simultaneously).  In the big picture, this is an acceptable scenario because the next call to do an operation on that device will result in it being loaded again.   I will still need to tweak the returning call to cater for this scenario.\n\nOn a separate note, device loading is recursive (i.e.resulting of children and parent loading as well), meaning a child or a parent may request the same device to be loaded again.   Putting the entire block in a lock will end up in a deadlock (tried that before and had to change).",
      "parentUuid": "26fc5d8c_d7583ffe",
      "range": {
        "startLine": 410,
        "startChar": 9,
        "endLine": 410,
        "endChar": 33
      },
      "revId": "de6cd32c26d3360e508d7dc940b0e9c01a1d584c",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "64ea6ba4_6e77b872",
        "filename": "rw_core/core/device_manager.go",
        "patchSetId": 1
      },
      "lineNbr": 410,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2019-09-06T15:38:04Z",
      "side": 1,
      "message": "if loading is recursive, should the lock either be moved outside of the call so that the recursion is covered? Or could the recussion be handled by a queue/channel (i.e. load isn\u0027t called directly, but you enqueue a device to be loaded then have a single thread load each device, which may mean more devices are enqueued). This second approach means that if the caller wants the result of the load then they have to wait for a \"return event\" as opposed to a simple func call. It also means that depending on how its implemented you may get a partially loaded device at some point (i.e. not all parents, children are loaded).\n\nAnyway, I will leave it to you as to what if anything needs to be done, just concerned there is a latent issue that might bite us when we are under load.",
      "parentUuid": "71a7899e_8f37ad98",
      "range": {
        "startLine": 410,
        "startChar": 9,
        "endLine": 410,
        "endChar": 33
      },
      "revId": "de6cd32c26d3360e508d7dc940b0e9c01a1d584c",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "10a22b0c_b2ce13e7",
        "filename": "rw_core/core/device_manager.go",
        "patchSetId": 1
      },
      "lineNbr": 410,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2019-09-06T15:47:02Z",
      "side": 1,
      "message": "A recursive loading implies loading either a child device, a parent device (handle by device manager) or a logical device (handled by a logical device manager).  During the loading (especially logical device loading) other operations are run (e.g. generating a device graph) which may result in other devices being loaded in memory.  Having a queue/channel for this and let everything handle by a single thread will result in deadlock conditions.   \n\nTo cater for the edge case, I will change that code to ensure no partial results are returned, most likely using a lock per device.",
      "parentUuid": "64ea6ba4_6e77b872",
      "range": {
        "startLine": 410,
        "startChar": 9,
        "endLine": 410,
        "endChar": 33
      },
      "revId": "de6cd32c26d3360e508d7dc940b0e9c01a1d584c",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e32322fe_f6d754be",
        "filename": "rw_core/core/device_manager.go",
        "patchSetId": 1
      },
      "lineNbr": 505,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2019-09-06T01:30:48Z",
      "side": 1,
      "message": "technically err is being re-allocated on the stack for each loop iteration. might we want to declare it as a var outside of the loop and reuse it?",
      "range": {
        "startLine": 505,
        "startChar": 6,
        "endLine": 505,
        "endChar": 9
      },
      "revId": "de6cd32c26d3360e508d7dc940b0e9c01a1d584c",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "aff2ec9c_7e4efe1a",
        "filename": "rw_core/core/device_manager.go",
        "patchSetId": 1
      },
      "lineNbr": 505,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2019-09-06T13:07:02Z",
      "side": 1,
      "message": "Good point, will update",
      "parentUuid": "e32322fe_f6d754be",
      "range": {
        "startLine": 505,
        "startChar": 6,
        "endLine": 505,
        "endChar": 9
      },
      "revId": "de6cd32c26d3360e508d7dc940b0e9c01a1d584c",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b4cd4b0f_67101d47",
        "filename": "rw_core/core/device_manager.go",
        "patchSetId": 1
      },
      "lineNbr": 1131,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2019-09-06T01:30:48Z",
      "side": 1,
      "message": "deletion outside of a mutex lock?",
      "range": {
        "startLine": 1131,
        "startChar": 9,
        "endLine": 1131,
        "endChar": 33
      },
      "revId": "de6cd32c26d3360e508d7dc940b0e9c01a1d584c",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "40a5fafc_ba7db01c",
        "filename": "rw_core/core/device_manager.go",
        "patchSetId": 1
      },
      "lineNbr": 1131,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2019-09-06T13:07:02Z",
      "side": 1,
      "message": "It\u0027s a sync map.",
      "parentUuid": "b4cd4b0f_67101d47",
      "range": {
        "startLine": 1131,
        "startChar": 9,
        "endLine": 1131,
        "endChar": 33
      },
      "revId": "de6cd32c26d3360e508d7dc940b0e9c01a1d584c",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "149e5b35_d4164a1c",
        "filename": "rw_core/core/logical_device_agent.go",
        "patchSetId": 1
      },
      "lineNbr": 280,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2019-09-06T01:30:48Z",
      "side": 1,
      "message": "if code block isn\u0027t needed, then it should be deleted.",
      "range": {
        "startLine": 272,
        "startChar": 2,
        "endLine": 280,
        "endChar": 3
      },
      "revId": "de6cd32c26d3360e508d7dc940b0e9c01a1d584c",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6f385508_6b2d1f01",
        "filename": "rw_core/core/logical_device_agent.go",
        "patchSetId": 1
      },
      "lineNbr": 280,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2019-09-06T13:07:02Z",
      "side": 1,
      "message": "Will do",
      "parentUuid": "149e5b35_d4164a1c",
      "range": {
        "startLine": 272,
        "startChar": 2,
        "endLine": 280,
        "endChar": 3
      },
      "revId": "de6cd32c26d3360e508d7dc940b0e9c01a1d584c",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7dfb162f_47815802",
        "filename": "rw_core/core/logical_device_agent.go",
        "patchSetId": 1
      },
      "lineNbr": 307,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2019-09-06T01:30:48Z",
      "side": 1,
      "message": "if code block isn\u0027t needed, then it should be deleted.",
      "range": {
        "startLine": 299,
        "startChar": 0,
        "endLine": 307,
        "endChar": 3
      },
      "revId": "de6cd32c26d3360e508d7dc940b0e9c01a1d584c",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9e59cd24_98dd41ed",
        "filename": "rw_core/core/logical_device_agent.go",
        "patchSetId": 1
      },
      "lineNbr": 346,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2019-09-06T01:30:48Z",
      "side": 1,
      "message": "what are the rules about when a device can be updated without a lock v. with a lock?",
      "range": {
        "startLine": 346,
        "startChar": 35,
        "endLine": 346,
        "endChar": 46
      },
      "revId": "de6cd32c26d3360e508d7dc940b0e9c01a1d584c",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "43026879_06da824b",
        "filename": "rw_core/core/logical_device_agent.go",
        "patchSetId": 1
      },
      "lineNbr": 346,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2019-09-06T13:07:02Z",
      "side": 1,
      "message": "Update without a lock implies the caller is already holding the lock.   It\u0027s not very pretty but the other option would have been to put all the code together, hence a bunch of duplicated codes.",
      "parentUuid": "9e59cd24_98dd41ed",
      "range": {
        "startLine": 346,
        "startChar": 35,
        "endLine": 346,
        "endChar": 46
      },
      "revId": "de6cd32c26d3360e508d7dc940b0e9c01a1d584c",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "629ee300_84213345",
        "filename": "rw_core/core/logical_device_agent.go",
        "patchSetId": 1
      },
      "lineNbr": 566,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2019-09-06T01:30:48Z",
      "side": 1,
      "message": "What is the difference between getLogicalDeviceWithoutLock and GetLogicalDevice? presumably GetLogicalDevice does it with a lock?\n\nAre we getting a copy, or do we now have a lock until we call unlock? Wondering if GetLogicalDevice should change to GetLogicalDeviceWithLock to make this clear.",
      "range": {
        "startLine": 566,
        "startChar": 21,
        "endLine": 566,
        "endChar": 37
      },
      "revId": "de6cd32c26d3360e508d7dc940b0e9c01a1d584c",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "45d2e374_94a05ac1",
        "filename": "rw_core/core/logical_device_agent.go",
        "patchSetId": 1
      },
      "lineNbr": 566,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2019-09-06T13:07:02Z",
      "side": 1,
      "message": "GetLogicalDevice returns a copy of the data.  That method uses a readlock to get the data from the model.   The caller should not hold the lock before calling this method otherwise it will cause a deadlock.   This method can be access outside the package.   getLogicalDeviceWithoutLock is an internal method and the caller must hold the device lock before calling that method.",
      "parentUuid": "629ee300_84213345",
      "range": {
        "startLine": 566,
        "startChar": 21,
        "endLine": 566,
        "endChar": 37
      },
      "revId": "de6cd32c26d3360e508d7dc940b0e9c01a1d584c",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5b79f18d_b51a1404",
        "filename": "rw_core/core/logical_device_manager.go",
        "patchSetId": 1
      },
      "lineNbr": 224,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2019-09-06T01:30:48Z",
      "side": 1,
      "message": "delete outside of lock",
      "range": {
        "startLine": 224,
        "startChar": 10,
        "endLine": 224,
        "endChar": 29
      },
      "revId": "de6cd32c26d3360e508d7dc940b0e9c01a1d584c",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "83a13550_d467548d",
        "filename": "rw_core/core/logical_device_manager.go",
        "patchSetId": 1
      },
      "lineNbr": 224,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2019-09-06T13:07:02Z",
      "side": 1,
      "message": "Same comments as in previous file.   This is a sync map.",
      "parentUuid": "5b79f18d_b51a1404",
      "range": {
        "startLine": 224,
        "startChar": 10,
        "endLine": 224,
        "endChar": 29
      },
      "revId": "de6cd32c26d3360e508d7dc940b0e9c01a1d584c",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7ae708ff_ea6b1d66",
        "filename": "rw_core/graph/device_graph.go",
        "patchSetId": 1
      },
      "lineNbr": 219,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2019-09-06T01:30:48Z",
      "side": 1,
      "message": "declare portId outside of loop?",
      "range": {
        "startLine": 219,
        "startChar": 3,
        "endLine": 219,
        "endChar": 9
      },
      "revId": "de6cd32c26d3360e508d7dc940b0e9c01a1d584c",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba735af2_6601999e",
        "filename": "rw_core/graph/device_graph.go",
        "patchSetId": 1
      },
      "lineNbr": 219,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2019-09-06T13:07:02Z",
      "side": 1,
      "message": "Sure will update",
      "parentUuid": "7ae708ff_ea6b1d66",
      "range": {
        "startLine": 219,
        "startChar": 3,
        "endLine": 219,
        "endChar": 9
      },
      "revId": "de6cd32c26d3360e508d7dc940b0e9c01a1d584c",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2273a93e_2ba4de0b",
        "filename": "rw_core/graph/device_graph.go",
        "patchSetId": 1
      },
      "lineNbr": 220,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2019-09-06T01:30:48Z",
      "side": 1,
      "message": "declare outside of loop?",
      "range": {
        "startLine": 220,
        "startChar": 6,
        "endLine": 220,
        "endChar": 13
      },
      "revId": "de6cd32c26d3360e508d7dc940b0e9c01a1d584c",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dc661cfe_75f21ca5",
        "filename": "rw_core/graph/device_graph.go",
        "patchSetId": 1
      },
      "lineNbr": 220,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2019-09-06T13:07:02Z",
      "side": 1,
      "message": "Will update",
      "parentUuid": "2273a93e_2ba4de0b",
      "range": {
        "startLine": 220,
        "startChar": 6,
        "endLine": 220,
        "endChar": 13
      },
      "revId": "de6cd32c26d3360e508d7dc940b0e9c01a1d584c",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    }
  ]
}