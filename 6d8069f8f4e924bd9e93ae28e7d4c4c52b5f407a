{
  "comments": [
    {
      "key": {
        "uuid": "55e17b39_e8a07a6e",
        "filename": "rw_core/core/device_agent.go",
        "patchSetId": 1
      },
      "lineNbr": 265,
      "author": {
        "id": 1000107
      },
      "writtenOn": "2019-12-12T14:08:47Z",
      "side": 1,
      "message": "Consider returning an already-complete `Response`.\n\n(An already-closed response could/should be added to the Response helper.)",
      "revId": "6d8069f8f4e924bd9e93ae28e7d4c4c52b5f407a",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f21151d6_58b3ddcb",
        "filename": "rw_core/core/device_agent.go",
        "patchSetId": 1
      },
      "lineNbr": 308,
      "author": {
        "id": 1000107
      },
      "writtenOn": "2019-12-12T14:08:47Z",
      "side": 1,
      "message": "Consider returning an already-complete `Response`.",
      "revId": "6d8069f8f4e924bd9e93ae28e7d4c4c52b5f407a",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5ab550a3_c5810975",
        "filename": "rw_core/core/device_agent.go",
        "patchSetId": 1
      },
      "lineNbr": 322,
      "author": {
        "id": 1000107
      },
      "writtenOn": "2019-12-12T14:08:47Z",
      "side": 1,
      "message": "Consider returning an already-complete `Response`.",
      "revId": "6d8069f8f4e924bd9e93ae28e7d4c4c52b5f407a",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "837400a3_dfa60af7",
        "filename": "rw_core/core/device_agent.go",
        "patchSetId": 1
      },
      "lineNbr": 355,
      "author": {
        "id": 1000107
      },
      "writtenOn": "2019-12-12T14:08:47Z",
      "side": 1,
      "message": "Should always check if err !\u003d nil first, and use that to determine if other values are valid.\nhttps://github.com/golang/go/wiki/CodeReviewComments#indent-error-flow",
      "revId": "6d8069f8f4e924bd9e93ae28e7d4c4c52b5f407a",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "05a75a3e_a83b8369",
        "filename": "rw_core/core/device_agent.go",
        "patchSetId": 1
      },
      "lineNbr": 355,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-12-12T15:54:57Z",
      "side": 1,
      "message": "The response could be nil (nothing to do for operation or empty) or error. This handles both. What do you mean by already-complete response?",
      "parentUuid": "837400a3_dfa60af7",
      "revId": "6d8069f8f4e924bd9e93ae28e7d4c4c52b5f407a",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2139b43c_61e47450",
        "filename": "rw_core/core/device_agent.go",
        "patchSetId": 1
      },
      "lineNbr": 355,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-12-12T15:59:01Z",
      "side": 1,
      "message": "The error would be nil when response is empty or nothing was done for the operation. No wait needed.",
      "parentUuid": "05a75a3e_a83b8369",
      "revId": "6d8069f8f4e924bd9e93ae28e7d4c4c52b5f407a",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "aa97cf32_78117383",
        "filename": "rw_core/core/device_agent.go",
        "patchSetId": 1
      },
      "lineNbr": 355,
      "author": {
        "id": 1000107
      },
      "writtenOn": "2019-12-12T16:17:11Z",
      "side": 1,
      "message": "Already-complete response: Add a function like `DoneResponse()` to coreutils that returns a Response with a closed chan, (thus returning a nil error immediately when sent to WaitForNilOrErrorResponse)",
      "parentUuid": "05a75a3e_a83b8369",
      "revId": "6d8069f8f4e924bd9e93ae28e7d4c4c52b5f407a",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d0a6ae14_53013ef2",
        "filename": "rw_core/core/device_agent.go",
        "patchSetId": 1
      },
      "lineNbr": 355,
      "author": {
        "id": 1000107
      },
      "writtenOn": "2019-12-12T16:17:11Z",
      "side": 1,
      "message": "The wait isn\u0027t needed, but it\u0027s counter-intuitive and hard to read.  If err!\u003dnil, handle error.  If err\u003d\u003dnil, other values should be valid.\ni.e. - don\u0027t use nil as a special case.\n\nhttps://github.com/golang/go/wiki/CodeReviewComments#in-band-errors",
      "parentUuid": "2139b43c_61e47450",
      "revId": "6d8069f8f4e924bd9e93ae28e7d4c4c52b5f407a",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "987f6bbf_52066eeb",
        "filename": "rw_core/core/device_agent.go",
        "patchSetId": 1
      },
      "lineNbr": 355,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-12-12T16:27:26Z",
      "side": 1,
      "message": "So you are saying, add a fake complete response when operation is a no-op and returns nil error. And then let waitfornil function would become another no-op as response was faked and return nil error? \nI can add: if err !\u003d nil || response \u003d\u003d nil though not possible for this iteration but if someone does a copy and spins another? \nWill that make you happy or you want to fake a response and do this circus? :)",
      "parentUuid": "d0a6ae14_53013ef2",
      "revId": "6d8069f8f4e924bd9e93ae28e7d4c4c52b5f407a",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f0d5f2d4_614db85d",
        "filename": "rw_core/core/device_agent.go",
        "patchSetId": 1
      },
      "lineNbr": 355,
      "author": {
        "id": 1000107
      },
      "writtenOn": "2019-12-12T16:39:33Z",
      "side": 1,
      "message": "\"Fake\" response is cleaner, imho.  \nThe response is just \"already complete\", which is in line with the logic of the current `return nil, nil`  cases.",
      "parentUuid": "987f6bbf_52066eeb",
      "revId": "6d8069f8f4e924bd9e93ae28e7d4c4c52b5f407a",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c269c0e1_878d6d30",
        "filename": "rw_core/core/device_agent.go",
        "patchSetId": 1
      },
      "lineNbr": 355,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2019-12-12T16:42:13Z",
      "side": 1,
      "message": "Right. But technically there is no need to call WaitforNilorErrorResponses function if nothing was done or operation was a no-op. But because that would make you happy, i would do the change. But would need re-testing.",
      "parentUuid": "f0d5f2d4_614db85d",
      "revId": "6d8069f8f4e924bd9e93ae28e7d4c4c52b5f407a",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "920cc377_ce4dab75",
        "filename": "rw_core/core/device_agent.go",
        "patchSetId": 1
      },
      "lineNbr": 368,
      "author": {
        "id": 1000107
      },
      "writtenOn": "2019-12-12T14:08:47Z",
      "side": 1,
      "message": "Consider returning an already-complete `Response`.",
      "revId": "6d8069f8f4e924bd9e93ae28e7d4c4c52b5f407a",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1bd2eec8_a660da87",
        "filename": "rw_core/core/device_agent.go",
        "patchSetId": 1
      },
      "lineNbr": 413,
      "author": {
        "id": 1000107
      },
      "writtenOn": "2019-12-12T14:08:47Z",
      "side": 1,
      "message": "Consider returning an already-complete `Response`.",
      "revId": "6d8069f8f4e924bd9e93ae28e7d4c4c52b5f407a",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8b770860_5d45d791",
        "filename": "rw_core/core/device_agent.go",
        "patchSetId": 1
      },
      "lineNbr": 422,
      "author": {
        "id": 1000107
      },
      "writtenOn": "2019-12-12T14:08:47Z",
      "side": 1,
      "message": "Consider returning an already-complete `Response`.",
      "revId": "6d8069f8f4e924bd9e93ae28e7d4c4c52b5f407a",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1e512511_2e606c4c",
        "filename": "rw_core/core/device_agent.go",
        "patchSetId": 1
      },
      "lineNbr": 445,
      "author": {
        "id": 1000107
      },
      "writtenOn": "2019-12-12T14:08:47Z",
      "side": 1,
      "message": "Just return Response instead of *Response.\n(Response already masks a pointer.)",
      "revId": "6d8069f8f4e924bd9e93ae28e7d4c4c52b5f407a",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "79f030ac_f3aaa407",
        "filename": "rw_core/core/device_agent.go",
        "patchSetId": 1
      },
      "lineNbr": 455,
      "author": {
        "id": 1000107
      },
      "writtenOn": "2019-12-12T14:08:47Z",
      "side": 1,
      "message": "should check err to determine validity of other values, not the other way around.",
      "revId": "6d8069f8f4e924bd9e93ae28e7d4c4c52b5f407a",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ea35696a_8623ca2f",
        "filename": "rw_core/core/device_agent.go",
        "patchSetId": 1
      },
      "lineNbr": 467,
      "author": {
        "id": 1000107
      },
      "writtenOn": "2019-12-12T14:08:47Z",
      "side": 1,
      "message": "Consider returning an already-complete `Response`.",
      "revId": "6d8069f8f4e924bd9e93ae28e7d4c4c52b5f407a",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "94d2058d_f65adb10",
        "filename": "rw_core/core/device_agent.go",
        "patchSetId": 1
      },
      "lineNbr": 482,
      "author": {
        "id": 1000107
      },
      "writtenOn": "2019-12-12T14:08:47Z",
      "side": 1,
      "message": "Consider returning an already-complete `Response`.",
      "revId": "6d8069f8f4e924bd9e93ae28e7d4c4c52b5f407a",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8fbee069_e280ec2e",
        "filename": "rw_core/core/device_agent.go",
        "patchSetId": 1
      },
      "lineNbr": 540,
      "author": {
        "id": 1000107
      },
      "writtenOn": "2019-12-12T14:08:47Z",
      "side": 1,
      "message": "Consider returning an already-complete `Response`.",
      "revId": "6d8069f8f4e924bd9e93ae28e7d4c4c52b5f407a",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fca992ac_cb714668",
        "filename": "rw_core/core/device_agent.go",
        "patchSetId": 1
      },
      "lineNbr": 562,
      "author": {
        "id": 1000107
      },
      "writtenOn": "2019-12-12T14:08:47Z",
      "side": 1,
      "message": "Just return Response instead of *Response.\n(Response already masks a pointer.)",
      "revId": "6d8069f8f4e924bd9e93ae28e7d4c4c52b5f407a",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7d3ffc96_2a1be84f",
        "filename": "rw_core/core/device_agent.go",
        "patchSetId": 1
      },
      "lineNbr": 571,
      "author": {
        "id": 1000107
      },
      "writtenOn": "2019-12-12T14:08:47Z",
      "side": 1,
      "message": "Again: should check err to determine validity of other values, not the other way around.",
      "revId": "6d8069f8f4e924bd9e93ae28e7d4c4c52b5f407a",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    }
  ]
}