{
  "comments": [
    {
      "key": {
        "uuid": "974a6790_9bd0da2a",
        "filename": "afrouter/afrouter/config.go",
        "patchSetId": 2
      },
      "lineNbr": 37,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2019-05-29T00:50:28Z",
      "side": 1,
      "message": "Would the \"config.Version\" name be less confusing if we use \"config.DisplayVersionOnly\"? Just a thought.",
      "revId": "98cf84089f3a1f93b268397a7f67111851d34cb2",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fe146eac_a3195b18",
        "filename": "afrouter/afrouter/config.go",
        "patchSetId": 2
      },
      "lineNbr": 37,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2019-05-29T00:55:32Z",
      "side": 1,
      "message": "I thought about that, because I agree it is a bit confusing, but was also thinking DisplayVersionOnly is quite long. Let me change it to the longer version, but I think the command line option `-version` stays the same.",
      "parentUuid": "974a6790_9bd0da2a",
      "revId": "98cf84089f3a1f93b268397a7f67111851d34cb2",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a9933b8_358907b6",
        "filename": "common/version/version.go",
        "patchSetId": 2
      },
      "lineNbr": 60,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2019-05-29T00:50:28Z",
      "side": 1,
      "message": "The version string definition in the grpc file can be changed with a new version proto message added.   I don\u0027t believe anyone is using the version field other than the Core. Thoughts?",
      "revId": "98cf84089f3a1f93b268397a7f67111851d34cb2",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6a3efdb7_ba000e5d",
        "filename": "common/version/version.go",
        "patchSetId": 2
      },
      "lineNbr": 60,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2019-05-29T00:55:32Z",
      "side": 1,
      "message": "I was concerned about changing the protos because of the ramifications and I also wasn\u0027t sure what the final message format might be. i.e. might it be a collection of version each with a component name? something else? So I took the easy way out and override the value. \n\nWhat is core doing with the version today. Changing the version string to a JSON object didn\u0027t seem to affect anything as VOLTHA still worked.",
      "parentUuid": "5a9933b8_358907b6",
      "revId": "98cf84089f3a1f93b268397a7f67111851d34cb2",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e0369ed8_82853960",
        "filename": "common/version/version.go",
        "patchSetId": 2
      },
      "lineNbr": 60,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2019-05-29T01:03:28Z",
      "side": 1,
      "message": "The Core does nothing with the version today.\n\nI was thinking that on voltha startup every component would write a \"component\" info (including version) in the KV store following a proto format.   When a GetVoltha is issued then the ro core query the KV store and return a list of components.\n\nFor now, we can stay with the string and change later.  Another backlog item.",
      "parentUuid": "6a3efdb7_ba000e5d",
      "revId": "98cf84089f3a1f93b268397a7f67111851d34cb2",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "47444890_42da4ab6",
        "filename": "common/version/version.go",
        "patchSetId": 2
      },
      "lineNbr": 60,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2019-05-29T01:06:38Z",
      "side": 1,
      "message": "I had thought about that, but then we get into the issue of we might have something that is in the KV store, but not actually running or maybe even downloaded.\n\nI was wondering if the api-server needs to \"trap\" on a version request and query k8s for running \"core\" voltha components, get the version information from each of those and return a list of version blocks.\n\nI say \"core\" components because version information for adapters can be gotten from the adapters list API.",
      "parentUuid": "e0369ed8_82853960",
      "revId": "98cf84089f3a1f93b268397a7f67111851d34cb2",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ae20327_dfedb63b",
        "filename": "common/version/version.go",
        "patchSetId": 2
      },
      "lineNbr": 60,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2019-05-29T01:12:53Z",
      "side": 1,
      "message": "With etcd transaction and session timeout a key associated with a component can be automatically removed if the component dies.\n\nThe api-server is a good approach as well.  I even think the api-server can have its own grpc service, returning a version of components being one of it.   At this time the api-server does not have the ability to broadcast a request and get the responses back.  It is definitely something worth pursuing.",
      "parentUuid": "47444890_42da4ab6",
      "revId": "98cf84089f3a1f93b268397a7f67111851d34cb2",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    }
  ]
}