{
  "comments": [
    {
      "key": {
        "uuid": "56f95280_4264b0c1",
        "filename": "rw_core/core/device/logical_agent_group.go",
        "patchSetId": 3
      },
      "lineNbr": 156,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2020-07-06T16:05:50Z",
      "side": 1,
      "message": "Should this logic be part of the flow decomposition logic for multicast flows or part of a different decomposition?",
      "revId": "29c90cd40ee9274f3a9f5ab021f163982f0e53f5",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ad4d182b_fb9485a5",
        "filename": "rw_core/core/device/logical_agent_group.go",
        "patchSetId": 3
      },
      "lineNbr": 156,
      "author": {
        "id": 1000498
      },
      "writtenOn": "2020-07-13T12:37:44Z",
      "side": 1,
      "message": "In contrast to flow rules, groups are not decomposed. VOLTHA Core directly sends them to the adapter without making any modification. Thus, there is no point in including them in a decomposition logic.",
      "parentUuid": "56f95280_4264b0c1",
      "revId": "29c90cd40ee9274f3a9f5ab021f163982f0e53f5",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d337e4f7_6824195c",
        "filename": "rw_core/core/device/logical_agent_group.go",
        "patchSetId": 3
      },
      "lineNbr": 156,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2020-07-13T14:26:02Z",
      "side": 1,
      "message": "Understood.  While the flow decomposer does not decompose the group it does take it into consideration when decomposing multicast flows (see processMulticastFlow() in flowDecomposer).  It would be cleaner to have this logic in one place, especially if there will eventually be changes to other functions dealing with groups.  If there won\u0027t be similar code added to these other functions then I guess it\u0027s ok to have it here.",
      "parentUuid": "ad4d182b_fb9485a5",
      "revId": "29c90cd40ee9274f3a9f5ab021f163982f0e53f5",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fa13cc1b_630242ef",
        "filename": "rw_core/core/device/logical_agent_group.go",
        "patchSetId": 3
      },
      "lineNbr": 156,
      "author": {
        "id": 1000498
      },
      "writtenOn": "2020-07-14T07:49:26Z",
      "side": 1,
      "message": "I appreciate the idea of keeping the logic in just one place. It may seem a little bit awkward to explicitly add groups to the deviceRules object returned by the flow decomposer. It would be good that the flow decomposer could return an object including all the necessary flow and groups to be sent to the adapter. However, the decomposer is used in a number of scenarios, such as multicast flow add/remove, and every scenario has different requirements. It does not seem possible to implement a common logic in the flow decomposer that would fit in all scenarios.",
      "parentUuid": "d337e4f7_6824195c",
      "revId": "29c90cd40ee9274f3a9f5ab021f163982f0e53f5",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3aafb62d_23e99b29",
        "filename": "rw_core/core/device/logical_agent_group.go",
        "patchSetId": 3
      },
      "lineNbr": 156,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2020-07-20T17:17:38Z",
      "side": 1,
      "message": "The flow decomposer decomposes logical flows and groups into flows for each device (parent and child).  It does not care whether the flows are being added or removed.   Therefore, it is possible to implement this in the flow decomposer.\n\nI will give this patch a +1 with the understanding that if this code is being repeated in other functions which handle groups then this code will need to be moved into the flow decomposer.",
      "parentUuid": "fa13cc1b_630242ef",
      "revId": "29c90cd40ee9274f3a9f5ab021f163982f0e53f5",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": true
    }
  ]
}