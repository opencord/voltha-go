{
  "comments": [
    {
      "key": {
        "uuid": "f82c40d2_1e095956",
        "filename": "rw_core/core/device/agent.go",
        "patchSetId": 2
      },
      "lineNbr": 262,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2020-07-23T17:33:42Z",
      "side": 1,
      "message": "Are there cases where getDeviceWithoutLock() is invoked without the \"lock\" being held?   A caller without a lock needs to invoke the getDevice().  Once the lock is held then the agent.Device can be modified as-is.  If that\u0027s not the case then we need to make sure that no caller is invoking a getDeviceWithoutLock() if they do not have the lock.\n\nRe-introducing Clone will affect processing time as well.",
      "revId": "f6db9f1f8b8b90d29a1e49c7c332031435cdea3c",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6abcf52f_736b97b1",
        "filename": "rw_core/core/device/agent.go",
        "patchSetId": 2
      },
      "lineNbr": 262,
      "author": {
        "id": 1000107
      },
      "writtenOn": "2020-07-23T18:20:48Z",
      "side": 1,
      "message": "There are currently no places where either getDeviceWithoutLock() or getDeviceReadOnly() are called without the lock.\n\nThe problem is that, in order to process state transitions inline (the original change that this patch addresses), the lock must be released beforehand.\n\nHowever, many of these functions use the device to make requests _after_ the state transition.  The device must be cloned in such cases anyway.\n\nThe idea is to change the guarantees made with devices, to make it safe to use the returned device once the lock has been released.  (Either to return to the caller, to pass to another function, or to marshal \u0026 send.)\n\nThis is a change to locks so they have the same type of guarantees as flow/group/meter/etc. locks.\n\ncloneDeviceWithoutLock() is just a convenience to clone the device before making changes.\n\n(Let me look to see if the clone in getDevice() is still necessary...)\n\nPresumably, since the device no longer has flows/groups/meters/etc. saved internally, cloning shouldn\u0027t be computationally expensive like it was before.  (This could be optimized by manually cloning the top-level device struct only, as is done in some places with i.e. logical_ports.)\n\nI\u0027m also considering adding a \"loader\" for devices / logicalDevices, though that\u0027s outside the scope of this patch.",
      "parentUuid": "f82c40d2_1e095956",
      "revId": "f6db9f1f8b8b90d29a1e49c7c332031435cdea3c",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "046a5c52_6348045c",
        "filename": "rw_core/core/device/agent.go",
        "patchSetId": 2
      },
      "lineNbr": 262,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2020-07-24T12:48:32Z",
      "side": 1,
      "message": "There are different types of requests: 1) requests that change the state of the device, 2) requests that changes flows/groups/ports of that device.   Type (1) requests need to work on the latest device data (meaning the device needs to be reserved for each request) and Type (2) requests do not need to lock the device.    If this is correct, then I don\u0027t see why we need a clone for Type (1) and Type (2) requests.  Cloning indirectly implies that different requests may get different versions of the device, and since these requests are changing the device data then the last request will be overwriting all the previously updated data, unless there is a merge which is too error-prone to implement. \n\nIn getDevice() a clone is necessary since the caller may chose to update its local copy of the device (I won\u0027t be allowed to update the cached device as it did not obtain the device lock).",
      "parentUuid": "6abcf52f_736b97b1",
      "revId": "f6db9f1f8b8b90d29a1e49c7c332031435cdea3c",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ccea814c_70ae6a41",
        "filename": "rw_core/core/device/agent.go",
        "patchSetId": 2
      },
      "lineNbr": 262,
      "author": {
        "id": 1000107
      },
      "writtenOn": "2020-07-24T13:30:26Z",
      "side": 1,
      "message": "The issue is that, if a type (1) request modifies the device, any read-only requests would have to clone the device in order to avoid having their copy modified by type (1) function.  This change makes the \"current\" (agent.device) version read-only, so type (1) functions clone-\u003emodify-\u003ereplace.\n\nThis is similar to how flows/groups/meters/etc work.",
      "parentUuid": "046a5c52_6348045c",
      "revId": "f6db9f1f8b8b90d29a1e49c7c332031435cdea3c",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6d45d79f_5f004236",
        "filename": "rw_core/core/device/agent.go",
        "patchSetId": 2
      },
      "lineNbr": 262,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2020-07-24T13:47:33Z",
      "side": 1,
      "message": "So, you are only reversing the existing logic:  today a getDevice() clones the device but a type (1) request works directly on the cached version.   Also, with or without clone, in this commit, no two type (1) requests will proceed in parallel, yes?  Do you therefore need to have getDeviceReadOnly()?  Can getDevice() without Clone be used instead?\n\nRegarding performance, it would be interesting to see which functions get invoked the most in a typical workflow (looking at logs may give an insight): getDevice() or CloneDeviceWithoutLock().  The one that is invoked the most should not have the Clone in it.",
      "parentUuid": "ccea814c_70ae6a41",
      "revId": "f6db9f1f8b8b90d29a1e49c7c332031435cdea3c",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8a02f834_cb7123f3",
        "filename": "rw_core/core/device/agent.go",
        "patchSetId": 2
      },
      "lineNbr": 262,
      "author": {
        "id": 1000107
      },
      "writtenOn": "2020-07-27T21:12:27Z",
      "side": 1,
      "message": "That\u0027s correct, only one request that modifies the device will be allowed to run at a time.\n\nI don\u0027t think getDevice() needs to perform a clone, but I first need to verify that no caller modifies the returned device.\n\nAs far as I can tell, device read requests are much more common than device write requests.",
      "parentUuid": "6d45d79f_5f004236",
      "revId": "f6db9f1f8b8b90d29a1e49c7c332031435cdea3c",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "43e7d2f3_acd76f04",
        "filename": "rw_core/core/device/agent.go",
        "patchSetId": 2
      },
      "lineNbr": 670,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2020-07-23T21:18:39Z",
      "side": 1,
      "message": "Since the lock is released before processTransition, another waiting routine \ncould still grab the lock  before processTransition does.  In this case what do we gain by running processTransition in the caller\u0027s thread compare to running it in its own go routine?",
      "revId": "f6db9f1f8b8b90d29a1e49c7c332031435cdea3c",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b2574ca3_915bac21",
        "filename": "rw_core/core/device/agent.go",
        "patchSetId": 2
      },
      "lineNbr": 670,
      "author": {
        "id": 1000107
      },
      "writtenOn": "2020-07-23T22:56:44Z",
      "side": 1,
      "message": "The difference is that the caller will have to wait until after the the transition is complete.  (so if the caller\u0027s next action depends on any transition processing, it\u0027s guaranteed that the transition will be completed.)",
      "parentUuid": "43e7d2f3_acd76f04",
      "revId": "f6db9f1f8b8b90d29a1e49c7c332031435cdea3c",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a759b527_b60f2658",
        "filename": "rw_core/core/device/agent.go",
        "patchSetId": 2
      },
      "lineNbr": 670,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2020-07-24T12:48:32Z",
      "side": 1,
      "message": "So it only forces the caller to wait for the transition(s) to complete but another concurrent request can proceed without the transition(s) being complete, yes?",
      "parentUuid": "b2574ca3_915bac21",
      "revId": "f6db9f1f8b8b90d29a1e49c7c332031435cdea3c",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a81015ee_f0adff92",
        "filename": "rw_core/core/device/agent.go",
        "patchSetId": 2
      },
      "lineNbr": 670,
      "author": {
        "id": 1000107
      },
      "writtenOn": "2020-07-24T13:30:26Z",
      "side": 1,
      "message": "Yes, that\u0027s correct.",
      "parentUuid": "a759b527_b60f2658",
      "revId": "f6db9f1f8b8b90d29a1e49c7c332031435cdea3c",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ab1ba3d8_f091e047",
        "filename": "rw_core/core/device/agent.go",
        "patchSetId": 2
      },
      "lineNbr": 686,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2020-07-24T12:48:32Z",
      "side": 1,
      "message": "The function is called numerous times for the adapters.  It only changes the device reason, hence no state transition.  The state transition function will be called nonetheless.   Should there be a flag to the updateDeviceAndReleaseLock() to specify whether state transition is required?   This also applies when the adapter updates the device data.",
      "revId": "f6db9f1f8b8b90d29a1e49c7c332031435cdea3c",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3e5ec0b3_73eda07e",
        "filename": "rw_core/core/device/agent.go",
        "patchSetId": 2
      },
      "lineNbr": 686,
      "author": {
        "id": 1000107
      },
      "writtenOn": "2020-07-24T13:30:26Z",
      "side": 1,
      "message": "I don\u0027t think a flag is needed.  A state transition will be attempted for each device update, but is a no-op if no state has changed.  Should have minimal impact on performance.\n\nI thought this would be cleaner than having a separate function to be used only in the case of a state change.",
      "parentUuid": "ab1ba3d8_f091e047",
      "revId": "f6db9f1f8b8b90d29a1e49c7c332031435cdea3c",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": true
    }
  ]
}