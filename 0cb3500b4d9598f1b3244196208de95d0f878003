{
  "comments": [
    {
      "key": {
        "uuid": "91acba9a_f3ee0642",
        "filename": "rw_core/core/api/grpc_nbi_handler_test.go",
        "patchSetId": 16
      },
      "lineNbr": 123,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2021-01-18T15:18:14Z",
      "side": 1,
      "message": "This is created but I do not see any routine waiting for any failure events.  Is this expected?",
      "revId": "0cb3500b4d9598f1b3244196208de95d0f878003",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b6b9c2be_5d20c8e5",
        "filename": "rw_core/core/api/grpc_nbi_handler_test.go",
        "patchSetId": 16
      },
      "lineNbr": 123,
      "author": {
        "id": 1000726
      },
      "writtenOn": "2021-01-19T07:53:27Z",
      "side": 1,
      "message": "Currently the eventProxy is being created and passed to manager as well as logical manager using which an instance of RPCEventManager is created and ultimately using eventProxy events are send out on kafka. As of now as and when an rpc failure event occurs, a go routine is created for sending that particular rpc event. There is one more jira for creating queues as well as creating a go routine which will initialise the queues and keep waiting on the error events to send them on kafka. But thats a separate Jira",
      "parentUuid": "91acba9a_f3ee0642",
      "revId": "0cb3500b4d9598f1b3244196208de95d0f878003",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "18a2ed47_e3505dde",
        "filename": "rw_core/core/api/grpc_nbi_handler_test.go",
        "patchSetId": 16
      },
      "lineNbr": 123,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2021-01-21T15:18:24Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b6b9c2be_5d20c8e5",
      "revId": "0cb3500b4d9598f1b3244196208de95d0f878003",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "337dfa02_a7b3b2c9",
        "filename": "rw_core/core/core.go",
        "patchSetId": 16
      },
      "lineNbr": 132,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2021-01-18T15:18:14Z",
      "side": 1,
      "message": "The deferred above was commented out because as far as i can remember it had an issue when the container is stopped.  Do you see any error when stopping the kafkaClientEvent?   If not then uncommented the kafkaClient.Stop() line as well.",
      "revId": "0cb3500b4d9598f1b3244196208de95d0f878003",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7373093c_b133861b",
        "filename": "rw_core/core/core.go",
        "patchSetId": 16
      },
      "lineNbr": 132,
      "author": {
        "id": 1000726
      },
      "writtenOn": "2021-01-19T07:53:27Z",
      "side": 1,
      "message": "kafkaClient.Stop is commented because this statement is getting executed in the defer kmp.Stop at line no 148 below. So thats why if we uncomment kafkaClient.Stop defer statement then this will result in error while stopping the container as stop would have already executed. Whereas for kafkaClientEvent we donot have any intercontainer proxy which is taking care of start and stop so we need to call stop here itself.",
      "parentUuid": "337dfa02_a7b3b2c9",
      "revId": "0cb3500b4d9598f1b3244196208de95d0f878003",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6bffa8de_635f29e3",
        "filename": "rw_core/core/core.go",
        "patchSetId": 16
      },
      "lineNbr": 132,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2021-01-21T15:18:24Z",
      "side": 1,
      "message": "ok, then please remove the commented code as it is confusing (I am easily confused ðŸ˜•)",
      "parentUuid": "7373093c_b133861b",
      "revId": "0cb3500b4d9598f1b3244196208de95d0f878003",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a63d6d7a_11223c4f",
        "filename": "rw_core/core/device/agent_flow.go",
        "patchSetId": 16
      },
      "lineNbr": 106,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2021-01-18T15:18:14Z",
      "side": 1,
      "message": "Do you still need to add the \"addFlowToAdapter\" rpc when the original RPC is in the context?",
      "revId": "0cb3500b4d9598f1b3244196208de95d0f878003",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c3c21bd6_31aba4f5",
        "filename": "rw_core/core/device/agent_flow.go",
        "patchSetId": 16
      },
      "lineNbr": 106,
      "author": {
        "id": 1000726
      },
      "writtenOn": "2021-01-19T07:53:27Z",
      "side": 1,
      "message": "not exactly, but this was already there in the function definition and is being used in logging. So didnot want to change it as I guess this was meant to trace the function from which adapter call has been generated. Hence kept it as is.",
      "parentUuid": "a63d6d7a_11223c4f",
      "revId": "0cb3500b4d9598f1b3244196208de95d0f878003",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a43bb454_652430e9",
        "filename": "rw_core/core/device/logical_manager.go",
        "patchSetId": 16
      },
      "lineNbr": 582,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2021-01-18T15:18:14Z",
      "side": 1,
      "message": "Why not just \"SentRPCEvents()\"",
      "revId": "0cb3500b4d9598f1b3244196208de95d0f878003",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "67674741_e318e6df",
        "filename": "rw_core/core/device/logical_manager.go",
        "patchSetId": 16
      },
      "lineNbr": 582,
      "author": {
        "id": 1000726
      },
      "writtenOn": "2021-01-19T07:53:27Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "a43bb454_652430e9",
      "revId": "0cb3500b4d9598f1b3244196208de95d0f878003",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e06df0fe_825e97b6",
        "filename": "rw_core/utils/core_utils.go",
        "patchSetId": 16
      },
      "lineNbr": 148,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2021-01-18T15:18:14Z",
      "side": 1,
      "message": "Debug?",
      "revId": "0cb3500b4d9598f1b3244196208de95d0f878003",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "86dcbe6a_e57791b5",
        "filename": "rw_core/utils/core_utils.go",
        "patchSetId": 16
      },
      "lineNbr": 148,
      "author": {
        "id": 1000726
      },
      "writtenOn": "2021-01-19T07:53:27Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "e06df0fe_825e97b6",
      "revId": "0cb3500b4d9598f1b3244196208de95d0f878003",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    }
  ]
}